# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.sm_policy_context_data import SmPolicyContextData  # noqa: F401,E501
from swagger_server.models.sm_policy_decision import SmPolicyDecision  # noqa: F401,E501
from swagger_server import util


class SmPolicyControl(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, context=None, policy=None):  # noqa: E501
        """SmPolicyControl - a model defined in Swagger

        :param context: The context of this SmPolicyControl.  # noqa: E501
        :type context: SmPolicyContextData
        :param policy: The policy of this SmPolicyControl.  # noqa: E501
        :type policy: SmPolicyDecision
        """
        self.swagger_types = {
            'context': SmPolicyContextData,
            'policy': SmPolicyDecision
        }

        self.attribute_map = {
            'context': 'context',
            'policy': 'policy'
        }
        self._context = context
        self._policy = policy

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SmPolicyControl of this SmPolicyControl.  # noqa: E501
        :rtype: SmPolicyControl
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this SmPolicyControl.


        :return: The context of this SmPolicyControl.
        :rtype: SmPolicyContextData
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this SmPolicyControl.


        :param context: The context of this SmPolicyControl.
        :type context: SmPolicyContextData
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")  # noqa: E501

        self._context = context

    @property
    def policy(self):
        """Gets the policy of this SmPolicyControl.


        :return: The policy of this SmPolicyControl.
        :rtype: SmPolicyDecision
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this SmPolicyControl.


        :param policy: The policy of this SmPolicyControl.
        :type policy: SmPolicyDecision
        """
        if policy is None:
            raise ValueError("Invalid value for `policy`, must not be `None`")  # noqa: E501

        self._policy = policy
