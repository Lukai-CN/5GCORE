# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.acc_net_ch_id import AccNetChId  # noqa: F401,E501
from swagger_server.models.access_type import AccessType  # noqa: F401,E501
from swagger_server.models.accu_usage_report import AccuUsageReport  # noqa: F401,E501
from swagger_server.models.ambr import Ambr  # noqa: F401,E501
from swagger_server.models.app_detection_info import AppDetectionInfo  # noqa: F401,E501
from swagger_server.models.credit_management_status import CreditManagementStatus  # noqa: F401,E501
from swagger_server.models.ipv4_addr import Ipv4Addr  # noqa: F401,E501
from swagger_server.models.ipv6_prefix import Ipv6Prefix  # noqa: F401,E501
from swagger_server.models.mac_addr48 import MacAddr48  # noqa: F401,E501
from swagger_server.models.network_id import NetworkId  # noqa: F401,E501
from swagger_server.models.policy_control_request_trigger import PolicyControlRequestTrigger  # noqa: F401,E501
from swagger_server.models.presence_info import PresenceInfo  # noqa: F401,E501
from swagger_server.models.qos_flow_usage import QosFlowUsage  # noqa: F401,E501
from swagger_server.models.qos_notification_control_info import QosNotificationControlInfo  # noqa: F401,E501
from swagger_server.models.rat_type import RatType  # noqa: F401,E501
from swagger_server.models.rule_report import RuleReport  # noqa: F401,E501
from swagger_server.models.serving_nf_identity import ServingNfIdentity  # noqa: F401,E501
from swagger_server.models.session_rule_report import SessionRuleReport  # noqa: F401,E501
from swagger_server.models.subscribed_default_qos import SubscribedDefaultQos  # noqa: F401,E501
from swagger_server.models.time_zone import TimeZone  # noqa: F401,E501
from swagger_server.models.trace_data import TraceData  # noqa: F401,E501
from swagger_server.models.ue_initiated_resource_request import UeInitiatedResourceRequest  # noqa: F401,E501
from swagger_server.models.user_location import UserLocation  # noqa: F401,E501
from swagger_server import util


class SmPolicyUpdateContextData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, rep_policy_ctrl_req_triggers=None, acc_net_ch_ids=None, access_type=None, rat_type=None, serving_network=None, user_location_info=None, ue_time_zone=None, rel_ipv4_address=None, ipv4_address=None, ipv6_address_prefix=None, rel_ipv6_address_prefix=None, rel_ue_mac=None, ue_mac=None, subs_sess_ambr=None, subs_def_qos=None, num_of_pack_filter=None, accu_usage_reports=None, _3gpp_ps_data_off_status=None, app_detection_infos=None, rule_reports=None, sess_rule_reports=None, qnc_reports=None, user_location_info_time=None, rep_pra_infos=None, ue_init_res_req=None, ref_qos_indication=None, qos_flow_usage=None, credit_manage_status=None, serv_nf_id=None, trace_req=None):  # noqa: E501
        """SmPolicyUpdateContextData - a model defined in Swagger

        :param rep_policy_ctrl_req_triggers: The rep_policy_ctrl_req_triggers of this SmPolicyUpdateContextData.  # noqa: E501
        :type rep_policy_ctrl_req_triggers: List[PolicyControlRequestTrigger]
        :param acc_net_ch_ids: The acc_net_ch_ids of this SmPolicyUpdateContextData.  # noqa: E501
        :type acc_net_ch_ids: List[AccNetChId]
        :param access_type: The access_type of this SmPolicyUpdateContextData.  # noqa: E501
        :type access_type: AccessType
        :param rat_type: The rat_type of this SmPolicyUpdateContextData.  # noqa: E501
        :type rat_type: RatType
        :param serving_network: The serving_network of this SmPolicyUpdateContextData.  # noqa: E501
        :type serving_network: NetworkId
        :param user_location_info: The user_location_info of this SmPolicyUpdateContextData.  # noqa: E501
        :type user_location_info: UserLocation
        :param ue_time_zone: The ue_time_zone of this SmPolicyUpdateContextData.  # noqa: E501
        :type ue_time_zone: TimeZone
        :param rel_ipv4_address: The rel_ipv4_address of this SmPolicyUpdateContextData.  # noqa: E501
        :type rel_ipv4_address: Ipv4Addr
        :param ipv4_address: The ipv4_address of this SmPolicyUpdateContextData.  # noqa: E501
        :type ipv4_address: Ipv4Addr
        :param ipv6_address_prefix: The ipv6_address_prefix of this SmPolicyUpdateContextData.  # noqa: E501
        :type ipv6_address_prefix: Ipv6Prefix
        :param rel_ipv6_address_prefix: The rel_ipv6_address_prefix of this SmPolicyUpdateContextData.  # noqa: E501
        :type rel_ipv6_address_prefix: Ipv6Prefix
        :param rel_ue_mac: The rel_ue_mac of this SmPolicyUpdateContextData.  # noqa: E501
        :type rel_ue_mac: MacAddr48
        :param ue_mac: The ue_mac of this SmPolicyUpdateContextData.  # noqa: E501
        :type ue_mac: MacAddr48
        :param subs_sess_ambr: The subs_sess_ambr of this SmPolicyUpdateContextData.  # noqa: E501
        :type subs_sess_ambr: Ambr
        :param subs_def_qos: The subs_def_qos of this SmPolicyUpdateContextData.  # noqa: E501
        :type subs_def_qos: SubscribedDefaultQos
        :param num_of_pack_filter: The num_of_pack_filter of this SmPolicyUpdateContextData.  # noqa: E501
        :type num_of_pack_filter: int
        :param accu_usage_reports: The accu_usage_reports of this SmPolicyUpdateContextData.  # noqa: E501
        :type accu_usage_reports: List[AccuUsageReport]
        :param _3gpp_ps_data_off_status: The _3gpp_ps_data_off_status of this SmPolicyUpdateContextData.  # noqa: E501
        :type _3gpp_ps_data_off_status: bool
        :param app_detection_infos: The app_detection_infos of this SmPolicyUpdateContextData.  # noqa: E501
        :type app_detection_infos: List[AppDetectionInfo]
        :param rule_reports: The rule_reports of this SmPolicyUpdateContextData.  # noqa: E501
        :type rule_reports: List[RuleReport]
        :param sess_rule_reports: The sess_rule_reports of this SmPolicyUpdateContextData.  # noqa: E501
        :type sess_rule_reports: List[SessionRuleReport]
        :param qnc_reports: The qnc_reports of this SmPolicyUpdateContextData.  # noqa: E501
        :type qnc_reports: List[QosNotificationControlInfo]
        :param user_location_info_time: The user_location_info_time of this SmPolicyUpdateContextData.  # noqa: E501
        :type user_location_info_time: datetime
        :param rep_pra_infos: The rep_pra_infos of this SmPolicyUpdateContextData.  # noqa: E501
        :type rep_pra_infos: Dict[str, PresenceInfo]
        :param ue_init_res_req: The ue_init_res_req of this SmPolicyUpdateContextData.  # noqa: E501
        :type ue_init_res_req: UeInitiatedResourceRequest
        :param ref_qos_indication: The ref_qos_indication of this SmPolicyUpdateContextData.  # noqa: E501
        :type ref_qos_indication: bool
        :param qos_flow_usage: The qos_flow_usage of this SmPolicyUpdateContextData.  # noqa: E501
        :type qos_flow_usage: QosFlowUsage
        :param credit_manage_status: The credit_manage_status of this SmPolicyUpdateContextData.  # noqa: E501
        :type credit_manage_status: CreditManagementStatus
        :param serv_nf_id: The serv_nf_id of this SmPolicyUpdateContextData.  # noqa: E501
        :type serv_nf_id: ServingNfIdentity
        :param trace_req: The trace_req of this SmPolicyUpdateContextData.  # noqa: E501
        :type trace_req: TraceData
        """
        self.swagger_types = {
            'rep_policy_ctrl_req_triggers': List[PolicyControlRequestTrigger],
            'acc_net_ch_ids': List[AccNetChId],
            'access_type': AccessType,
            'rat_type': RatType,
            'serving_network': NetworkId,
            'user_location_info': UserLocation,
            'ue_time_zone': TimeZone,
            'rel_ipv4_address': Ipv4Addr,
            'ipv4_address': Ipv4Addr,
            'ipv6_address_prefix': Ipv6Prefix,
            'rel_ipv6_address_prefix': Ipv6Prefix,
            'rel_ue_mac': MacAddr48,
            'ue_mac': MacAddr48,
            'subs_sess_ambr': Ambr,
            'subs_def_qos': SubscribedDefaultQos,
            'num_of_pack_filter': int,
            'accu_usage_reports': List[AccuUsageReport],
            '_3gpp_ps_data_off_status': bool,
            'app_detection_infos': List[AppDetectionInfo],
            'rule_reports': List[RuleReport],
            'sess_rule_reports': List[SessionRuleReport],
            'qnc_reports': List[QosNotificationControlInfo],
            'user_location_info_time': datetime,
            'rep_pra_infos': Dict[str, PresenceInfo],
            'ue_init_res_req': UeInitiatedResourceRequest,
            'ref_qos_indication': bool,
            'qos_flow_usage': QosFlowUsage,
            'credit_manage_status': CreditManagementStatus,
            'serv_nf_id': ServingNfIdentity,
            'trace_req': TraceData
        }

        self.attribute_map = {
            'rep_policy_ctrl_req_triggers': 'repPolicyCtrlReqTriggers',
            'acc_net_ch_ids': 'accNetChIds',
            'access_type': 'accessType',
            'rat_type': 'ratType',
            'serving_network': 'servingNetwork',
            'user_location_info': 'userLocationInfo',
            'ue_time_zone': 'ueTimeZone',
            'rel_ipv4_address': 'relIpv4Address',
            'ipv4_address': 'ipv4Address',
            'ipv6_address_prefix': 'ipv6AddressPrefix',
            'rel_ipv6_address_prefix': 'relIpv6AddressPrefix',
            'rel_ue_mac': 'relUeMac',
            'ue_mac': 'ueMac',
            'subs_sess_ambr': 'subsSessAmbr',
            'subs_def_qos': 'subsDefQos',
            'num_of_pack_filter': 'numOfPackFilter',
            'accu_usage_reports': 'accuUsageReports',
            '_3gpp_ps_data_off_status': '3gppPsDataOffStatus',
            'app_detection_infos': 'appDetectionInfos',
            'rule_reports': 'ruleReports',
            'sess_rule_reports': 'sessRuleReports',
            'qnc_reports': 'qncReports',
            'user_location_info_time': 'userLocationInfoTime',
            'rep_pra_infos': 'repPraInfos',
            'ue_init_res_req': 'ueInitResReq',
            'ref_qos_indication': 'refQosIndication',
            'qos_flow_usage': 'qosFlowUsage',
            'credit_manage_status': 'creditManageStatus',
            'serv_nf_id': 'servNfId',
            'trace_req': 'traceReq'
        }
        self._rep_policy_ctrl_req_triggers = rep_policy_ctrl_req_triggers
        self._acc_net_ch_ids = acc_net_ch_ids
        self._access_type = access_type
        self._rat_type = rat_type
        self._serving_network = serving_network
        self._user_location_info = user_location_info
        self._ue_time_zone = ue_time_zone
        self._rel_ipv4_address = rel_ipv4_address
        self._ipv4_address = ipv4_address
        self._ipv6_address_prefix = ipv6_address_prefix
        self._rel_ipv6_address_prefix = rel_ipv6_address_prefix
        self._rel_ue_mac = rel_ue_mac
        self._ue_mac = ue_mac
        self._subs_sess_ambr = subs_sess_ambr
        self._subs_def_qos = subs_def_qos
        self._num_of_pack_filter = num_of_pack_filter
        self._accu_usage_reports = accu_usage_reports
        self.__3gpp_ps_data_off_status = _3gpp_ps_data_off_status
        self._app_detection_infos = app_detection_infos
        self._rule_reports = rule_reports
        self._sess_rule_reports = sess_rule_reports
        self._qnc_reports = qnc_reports
        self._user_location_info_time = user_location_info_time
        self._rep_pra_infos = rep_pra_infos
        self._ue_init_res_req = ue_init_res_req
        self._ref_qos_indication = ref_qos_indication
        self._qos_flow_usage = qos_flow_usage
        self._credit_manage_status = credit_manage_status
        self._serv_nf_id = serv_nf_id
        self._trace_req = trace_req

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SmPolicyUpdateContextData of this SmPolicyUpdateContextData.  # noqa: E501
        :rtype: SmPolicyUpdateContextData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rep_policy_ctrl_req_triggers(self):
        """Gets the rep_policy_ctrl_req_triggers of this SmPolicyUpdateContextData.

        The policy control reqeust trigges which are met.  # noqa: E501

        :return: The rep_policy_ctrl_req_triggers of this SmPolicyUpdateContextData.
        :rtype: List[PolicyControlRequestTrigger]
        """
        return self._rep_policy_ctrl_req_triggers

    @rep_policy_ctrl_req_triggers.setter
    def rep_policy_ctrl_req_triggers(self, rep_policy_ctrl_req_triggers):
        """Sets the rep_policy_ctrl_req_triggers of this SmPolicyUpdateContextData.

        The policy control reqeust trigges which are met.  # noqa: E501

        :param rep_policy_ctrl_req_triggers: The rep_policy_ctrl_req_triggers of this SmPolicyUpdateContextData.
        :type rep_policy_ctrl_req_triggers: List[PolicyControlRequestTrigger]
        """

        self._rep_policy_ctrl_req_triggers = rep_policy_ctrl_req_triggers

    @property
    def acc_net_ch_ids(self):
        """Gets the acc_net_ch_ids of this SmPolicyUpdateContextData.

        Indicates the access network charging identifier for the PCC rule(s) or whole PDU session.  # noqa: E501

        :return: The acc_net_ch_ids of this SmPolicyUpdateContextData.
        :rtype: List[AccNetChId]
        """
        return self._acc_net_ch_ids

    @acc_net_ch_ids.setter
    def acc_net_ch_ids(self, acc_net_ch_ids):
        """Sets the acc_net_ch_ids of this SmPolicyUpdateContextData.

        Indicates the access network charging identifier for the PCC rule(s) or whole PDU session.  # noqa: E501

        :param acc_net_ch_ids: The acc_net_ch_ids of this SmPolicyUpdateContextData.
        :type acc_net_ch_ids: List[AccNetChId]
        """

        self._acc_net_ch_ids = acc_net_ch_ids

    @property
    def access_type(self):
        """Gets the access_type of this SmPolicyUpdateContextData.


        :return: The access_type of this SmPolicyUpdateContextData.
        :rtype: AccessType
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this SmPolicyUpdateContextData.


        :param access_type: The access_type of this SmPolicyUpdateContextData.
        :type access_type: AccessType
        """

        self._access_type = access_type

    @property
    def rat_type(self):
        """Gets the rat_type of this SmPolicyUpdateContextData.


        :return: The rat_type of this SmPolicyUpdateContextData.
        :rtype: RatType
        """
        return self._rat_type

    @rat_type.setter
    def rat_type(self, rat_type):
        """Sets the rat_type of this SmPolicyUpdateContextData.


        :param rat_type: The rat_type of this SmPolicyUpdateContextData.
        :type rat_type: RatType
        """

        self._rat_type = rat_type

    @property
    def serving_network(self):
        """Gets the serving_network of this SmPolicyUpdateContextData.


        :return: The serving_network of this SmPolicyUpdateContextData.
        :rtype: NetworkId
        """
        return self._serving_network

    @serving_network.setter
    def serving_network(self, serving_network):
        """Sets the serving_network of this SmPolicyUpdateContextData.


        :param serving_network: The serving_network of this SmPolicyUpdateContextData.
        :type serving_network: NetworkId
        """

        self._serving_network = serving_network

    @property
    def user_location_info(self):
        """Gets the user_location_info of this SmPolicyUpdateContextData.


        :return: The user_location_info of this SmPolicyUpdateContextData.
        :rtype: UserLocation
        """
        return self._user_location_info

    @user_location_info.setter
    def user_location_info(self, user_location_info):
        """Sets the user_location_info of this SmPolicyUpdateContextData.


        :param user_location_info: The user_location_info of this SmPolicyUpdateContextData.
        :type user_location_info: UserLocation
        """

        self._user_location_info = user_location_info

    @property
    def ue_time_zone(self):
        """Gets the ue_time_zone of this SmPolicyUpdateContextData.


        :return: The ue_time_zone of this SmPolicyUpdateContextData.
        :rtype: TimeZone
        """
        return self._ue_time_zone

    @ue_time_zone.setter
    def ue_time_zone(self, ue_time_zone):
        """Sets the ue_time_zone of this SmPolicyUpdateContextData.


        :param ue_time_zone: The ue_time_zone of this SmPolicyUpdateContextData.
        :type ue_time_zone: TimeZone
        """

        self._ue_time_zone = ue_time_zone

    @property
    def rel_ipv4_address(self):
        """Gets the rel_ipv4_address of this SmPolicyUpdateContextData.


        :return: The rel_ipv4_address of this SmPolicyUpdateContextData.
        :rtype: Ipv4Addr
        """
        return self._rel_ipv4_address

    @rel_ipv4_address.setter
    def rel_ipv4_address(self, rel_ipv4_address):
        """Sets the rel_ipv4_address of this SmPolicyUpdateContextData.


        :param rel_ipv4_address: The rel_ipv4_address of this SmPolicyUpdateContextData.
        :type rel_ipv4_address: Ipv4Addr
        """

        self._rel_ipv4_address = rel_ipv4_address

    @property
    def ipv4_address(self):
        """Gets the ipv4_address of this SmPolicyUpdateContextData.


        :return: The ipv4_address of this SmPolicyUpdateContextData.
        :rtype: Ipv4Addr
        """
        return self._ipv4_address

    @ipv4_address.setter
    def ipv4_address(self, ipv4_address):
        """Sets the ipv4_address of this SmPolicyUpdateContextData.


        :param ipv4_address: The ipv4_address of this SmPolicyUpdateContextData.
        :type ipv4_address: Ipv4Addr
        """

        self._ipv4_address = ipv4_address

    @property
    def ipv6_address_prefix(self):
        """Gets the ipv6_address_prefix of this SmPolicyUpdateContextData.


        :return: The ipv6_address_prefix of this SmPolicyUpdateContextData.
        :rtype: Ipv6Prefix
        """
        return self._ipv6_address_prefix

    @ipv6_address_prefix.setter
    def ipv6_address_prefix(self, ipv6_address_prefix):
        """Sets the ipv6_address_prefix of this SmPolicyUpdateContextData.


        :param ipv6_address_prefix: The ipv6_address_prefix of this SmPolicyUpdateContextData.
        :type ipv6_address_prefix: Ipv6Prefix
        """

        self._ipv6_address_prefix = ipv6_address_prefix

    @property
    def rel_ipv6_address_prefix(self):
        """Gets the rel_ipv6_address_prefix of this SmPolicyUpdateContextData.


        :return: The rel_ipv6_address_prefix of this SmPolicyUpdateContextData.
        :rtype: Ipv6Prefix
        """
        return self._rel_ipv6_address_prefix

    @rel_ipv6_address_prefix.setter
    def rel_ipv6_address_prefix(self, rel_ipv6_address_prefix):
        """Sets the rel_ipv6_address_prefix of this SmPolicyUpdateContextData.


        :param rel_ipv6_address_prefix: The rel_ipv6_address_prefix of this SmPolicyUpdateContextData.
        :type rel_ipv6_address_prefix: Ipv6Prefix
        """

        self._rel_ipv6_address_prefix = rel_ipv6_address_prefix

    @property
    def rel_ue_mac(self):
        """Gets the rel_ue_mac of this SmPolicyUpdateContextData.


        :return: The rel_ue_mac of this SmPolicyUpdateContextData.
        :rtype: MacAddr48
        """
        return self._rel_ue_mac

    @rel_ue_mac.setter
    def rel_ue_mac(self, rel_ue_mac):
        """Sets the rel_ue_mac of this SmPolicyUpdateContextData.


        :param rel_ue_mac: The rel_ue_mac of this SmPolicyUpdateContextData.
        :type rel_ue_mac: MacAddr48
        """

        self._rel_ue_mac = rel_ue_mac

    @property
    def ue_mac(self):
        """Gets the ue_mac of this SmPolicyUpdateContextData.


        :return: The ue_mac of this SmPolicyUpdateContextData.
        :rtype: MacAddr48
        """
        return self._ue_mac

    @ue_mac.setter
    def ue_mac(self, ue_mac):
        """Sets the ue_mac of this SmPolicyUpdateContextData.


        :param ue_mac: The ue_mac of this SmPolicyUpdateContextData.
        :type ue_mac: MacAddr48
        """

        self._ue_mac = ue_mac

    @property
    def subs_sess_ambr(self):
        """Gets the subs_sess_ambr of this SmPolicyUpdateContextData.


        :return: The subs_sess_ambr of this SmPolicyUpdateContextData.
        :rtype: Ambr
        """
        return self._subs_sess_ambr

    @subs_sess_ambr.setter
    def subs_sess_ambr(self, subs_sess_ambr):
        """Sets the subs_sess_ambr of this SmPolicyUpdateContextData.


        :param subs_sess_ambr: The subs_sess_ambr of this SmPolicyUpdateContextData.
        :type subs_sess_ambr: Ambr
        """

        self._subs_sess_ambr = subs_sess_ambr

    @property
    def subs_def_qos(self):
        """Gets the subs_def_qos of this SmPolicyUpdateContextData.


        :return: The subs_def_qos of this SmPolicyUpdateContextData.
        :rtype: SubscribedDefaultQos
        """
        return self._subs_def_qos

    @subs_def_qos.setter
    def subs_def_qos(self, subs_def_qos):
        """Sets the subs_def_qos of this SmPolicyUpdateContextData.


        :param subs_def_qos: The subs_def_qos of this SmPolicyUpdateContextData.
        :type subs_def_qos: SubscribedDefaultQos
        """

        self._subs_def_qos = subs_def_qos

    @property
    def num_of_pack_filter(self):
        """Gets the num_of_pack_filter of this SmPolicyUpdateContextData.

        Contains the number of supported packet filter for signalled QoS rules.  # noqa: E501

        :return: The num_of_pack_filter of this SmPolicyUpdateContextData.
        :rtype: int
        """
        return self._num_of_pack_filter

    @num_of_pack_filter.setter
    def num_of_pack_filter(self, num_of_pack_filter):
        """Sets the num_of_pack_filter of this SmPolicyUpdateContextData.

        Contains the number of supported packet filter for signalled QoS rules.  # noqa: E501

        :param num_of_pack_filter: The num_of_pack_filter of this SmPolicyUpdateContextData.
        :type num_of_pack_filter: int
        """

        self._num_of_pack_filter = num_of_pack_filter

    @property
    def accu_usage_reports(self):
        """Gets the accu_usage_reports of this SmPolicyUpdateContextData.

        Contains the usage report  # noqa: E501

        :return: The accu_usage_reports of this SmPolicyUpdateContextData.
        :rtype: List[AccuUsageReport]
        """
        return self._accu_usage_reports

    @accu_usage_reports.setter
    def accu_usage_reports(self, accu_usage_reports):
        """Sets the accu_usage_reports of this SmPolicyUpdateContextData.

        Contains the usage report  # noqa: E501

        :param accu_usage_reports: The accu_usage_reports of this SmPolicyUpdateContextData.
        :type accu_usage_reports: List[AccuUsageReport]
        """

        self._accu_usage_reports = accu_usage_reports

    @property
    def _3gpp_ps_data_off_status(self):
        """Gets the _3gpp_ps_data_off_status of this SmPolicyUpdateContextData.

        If it is included and set to true, the 3GPP PS Data Off is activated by the UE.  # noqa: E501

        :return: The _3gpp_ps_data_off_status of this SmPolicyUpdateContextData.
        :rtype: bool
        """
        return self.__3gpp_ps_data_off_status

    @_3gpp_ps_data_off_status.setter
    def _3gpp_ps_data_off_status(self, _3gpp_ps_data_off_status):
        """Sets the _3gpp_ps_data_off_status of this SmPolicyUpdateContextData.

        If it is included and set to true, the 3GPP PS Data Off is activated by the UE.  # noqa: E501

        :param _3gpp_ps_data_off_status: The _3gpp_ps_data_off_status of this SmPolicyUpdateContextData.
        :type _3gpp_ps_data_off_status: bool
        """

        self.__3gpp_ps_data_off_status = _3gpp_ps_data_off_status

    @property
    def app_detection_infos(self):
        """Gets the app_detection_infos of this SmPolicyUpdateContextData.

        Report the start/stop of the application traffic and detected SDF descriptions if applicable.  # noqa: E501

        :return: The app_detection_infos of this SmPolicyUpdateContextData.
        :rtype: List[AppDetectionInfo]
        """
        return self._app_detection_infos

    @app_detection_infos.setter
    def app_detection_infos(self, app_detection_infos):
        """Sets the app_detection_infos of this SmPolicyUpdateContextData.

        Report the start/stop of the application traffic and detected SDF descriptions if applicable.  # noqa: E501

        :param app_detection_infos: The app_detection_infos of this SmPolicyUpdateContextData.
        :type app_detection_infos: List[AppDetectionInfo]
        """

        self._app_detection_infos = app_detection_infos

    @property
    def rule_reports(self):
        """Gets the rule_reports of this SmPolicyUpdateContextData.

        Used to report the PCC rule failure.  # noqa: E501

        :return: The rule_reports of this SmPolicyUpdateContextData.
        :rtype: List[RuleReport]
        """
        return self._rule_reports

    @rule_reports.setter
    def rule_reports(self, rule_reports):
        """Sets the rule_reports of this SmPolicyUpdateContextData.

        Used to report the PCC rule failure.  # noqa: E501

        :param rule_reports: The rule_reports of this SmPolicyUpdateContextData.
        :type rule_reports: List[RuleReport]
        """

        self._rule_reports = rule_reports

    @property
    def sess_rule_reports(self):
        """Gets the sess_rule_reports of this SmPolicyUpdateContextData.

        Used to report the session rule failure.  # noqa: E501

        :return: The sess_rule_reports of this SmPolicyUpdateContextData.
        :rtype: List[SessionRuleReport]
        """
        return self._sess_rule_reports

    @sess_rule_reports.setter
    def sess_rule_reports(self, sess_rule_reports):
        """Sets the sess_rule_reports of this SmPolicyUpdateContextData.

        Used to report the session rule failure.  # noqa: E501

        :param sess_rule_reports: The sess_rule_reports of this SmPolicyUpdateContextData.
        :type sess_rule_reports: List[SessionRuleReport]
        """

        self._sess_rule_reports = sess_rule_reports

    @property
    def qnc_reports(self):
        """Gets the qnc_reports of this SmPolicyUpdateContextData.

        QoS Notification Control information.  # noqa: E501

        :return: The qnc_reports of this SmPolicyUpdateContextData.
        :rtype: List[QosNotificationControlInfo]
        """
        return self._qnc_reports

    @qnc_reports.setter
    def qnc_reports(self, qnc_reports):
        """Sets the qnc_reports of this SmPolicyUpdateContextData.

        QoS Notification Control information.  # noqa: E501

        :param qnc_reports: The qnc_reports of this SmPolicyUpdateContextData.
        :type qnc_reports: List[QosNotificationControlInfo]
        """

        self._qnc_reports = qnc_reports

    @property
    def user_location_info_time(self):
        """Gets the user_location_info_time of this SmPolicyUpdateContextData.


        :return: The user_location_info_time of this SmPolicyUpdateContextData.
        :rtype: datetime
        """
        return self._user_location_info_time

    @user_location_info_time.setter
    def user_location_info_time(self, user_location_info_time):
        """Sets the user_location_info_time of this SmPolicyUpdateContextData.


        :param user_location_info_time: The user_location_info_time of this SmPolicyUpdateContextData.
        :type user_location_info_time: datetime
        """

        self._user_location_info_time = user_location_info_time

    @property
    def rep_pra_infos(self):
        """Gets the rep_pra_infos of this SmPolicyUpdateContextData.

        Reports the changes of presence reporting area.  # noqa: E501

        :return: The rep_pra_infos of this SmPolicyUpdateContextData.
        :rtype: Dict[str, PresenceInfo]
        """
        return self._rep_pra_infos

    @rep_pra_infos.setter
    def rep_pra_infos(self, rep_pra_infos):
        """Sets the rep_pra_infos of this SmPolicyUpdateContextData.

        Reports the changes of presence reporting area.  # noqa: E501

        :param rep_pra_infos: The rep_pra_infos of this SmPolicyUpdateContextData.
        :type rep_pra_infos: Dict[str, PresenceInfo]
        """

        self._rep_pra_infos = rep_pra_infos

    @property
    def ue_init_res_req(self):
        """Gets the ue_init_res_req of this SmPolicyUpdateContextData.


        :return: The ue_init_res_req of this SmPolicyUpdateContextData.
        :rtype: UeInitiatedResourceRequest
        """
        return self._ue_init_res_req

    @ue_init_res_req.setter
    def ue_init_res_req(self, ue_init_res_req):
        """Sets the ue_init_res_req of this SmPolicyUpdateContextData.


        :param ue_init_res_req: The ue_init_res_req of this SmPolicyUpdateContextData.
        :type ue_init_res_req: UeInitiatedResourceRequest
        """

        self._ue_init_res_req = ue_init_res_req

    @property
    def ref_qos_indication(self):
        """Gets the ref_qos_indication of this SmPolicyUpdateContextData.

        If it is included and set to true, the reflective QoS is supported by the UE. If it is included and set to false, the reflective QoS is revoked by the UE.  # noqa: E501

        :return: The ref_qos_indication of this SmPolicyUpdateContextData.
        :rtype: bool
        """
        return self._ref_qos_indication

    @ref_qos_indication.setter
    def ref_qos_indication(self, ref_qos_indication):
        """Sets the ref_qos_indication of this SmPolicyUpdateContextData.

        If it is included and set to true, the reflective QoS is supported by the UE. If it is included and set to false, the reflective QoS is revoked by the UE.  # noqa: E501

        :param ref_qos_indication: The ref_qos_indication of this SmPolicyUpdateContextData.
        :type ref_qos_indication: bool
        """

        self._ref_qos_indication = ref_qos_indication

    @property
    def qos_flow_usage(self):
        """Gets the qos_flow_usage of this SmPolicyUpdateContextData.


        :return: The qos_flow_usage of this SmPolicyUpdateContextData.
        :rtype: QosFlowUsage
        """
        return self._qos_flow_usage

    @qos_flow_usage.setter
    def qos_flow_usage(self, qos_flow_usage):
        """Sets the qos_flow_usage of this SmPolicyUpdateContextData.


        :param qos_flow_usage: The qos_flow_usage of this SmPolicyUpdateContextData.
        :type qos_flow_usage: QosFlowUsage
        """

        self._qos_flow_usage = qos_flow_usage

    @property
    def credit_manage_status(self):
        """Gets the credit_manage_status of this SmPolicyUpdateContextData.


        :return: The credit_manage_status of this SmPolicyUpdateContextData.
        :rtype: CreditManagementStatus
        """
        return self._credit_manage_status

    @credit_manage_status.setter
    def credit_manage_status(self, credit_manage_status):
        """Sets the credit_manage_status of this SmPolicyUpdateContextData.


        :param credit_manage_status: The credit_manage_status of this SmPolicyUpdateContextData.
        :type credit_manage_status: CreditManagementStatus
        """

        self._credit_manage_status = credit_manage_status

    @property
    def serv_nf_id(self):
        """Gets the serv_nf_id of this SmPolicyUpdateContextData.


        :return: The serv_nf_id of this SmPolicyUpdateContextData.
        :rtype: ServingNfIdentity
        """
        return self._serv_nf_id

    @serv_nf_id.setter
    def serv_nf_id(self, serv_nf_id):
        """Sets the serv_nf_id of this SmPolicyUpdateContextData.


        :param serv_nf_id: The serv_nf_id of this SmPolicyUpdateContextData.
        :type serv_nf_id: ServingNfIdentity
        """

        self._serv_nf_id = serv_nf_id

    @property
    def trace_req(self):
        """Gets the trace_req of this SmPolicyUpdateContextData.


        :return: The trace_req of this SmPolicyUpdateContextData.
        :rtype: TraceData
        """
        return self._trace_req

    @trace_req.setter
    def trace_req(self, trace_req):
        """Sets the trace_req of this SmPolicyUpdateContextData.


        :param trace_req: The trace_req of this SmPolicyUpdateContextData.
        :type trace_req: TraceData
        """

        self._trace_req = trace_req
