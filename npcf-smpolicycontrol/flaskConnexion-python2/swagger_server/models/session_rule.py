# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.ambr import Ambr  # noqa: F401,E501
from swagger_server.models.authorized_default_qos import AuthorizedDefaultQos  # noqa: F401,E501
from swagger_server import util


class SessionRule(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, auth_sess_ambr=None, auth_def_qos=None, sess_rule_id=None, ref_um_data=None, ref_cond_data=None):  # noqa: E501
        """SessionRule - a model defined in Swagger

        :param auth_sess_ambr: The auth_sess_ambr of this SessionRule.  # noqa: E501
        :type auth_sess_ambr: Ambr
        :param auth_def_qos: The auth_def_qos of this SessionRule.  # noqa: E501
        :type auth_def_qos: AuthorizedDefaultQos
        :param sess_rule_id: The sess_rule_id of this SessionRule.  # noqa: E501
        :type sess_rule_id: str
        :param ref_um_data: The ref_um_data of this SessionRule.  # noqa: E501
        :type ref_um_data: str
        :param ref_cond_data: The ref_cond_data of this SessionRule.  # noqa: E501
        :type ref_cond_data: str
        """
        self.swagger_types = {
            'auth_sess_ambr': Ambr,
            'auth_def_qos': AuthorizedDefaultQos,
            'sess_rule_id': str,
            'ref_um_data': str,
            'ref_cond_data': str
        }

        self.attribute_map = {
            'auth_sess_ambr': 'authSessAmbr',
            'auth_def_qos': 'authDefQos',
            'sess_rule_id': 'sessRuleId',
            'ref_um_data': 'refUmData',
            'ref_cond_data': 'refCondData'
        }
        self._auth_sess_ambr = auth_sess_ambr
        self._auth_def_qos = auth_def_qos
        self._sess_rule_id = sess_rule_id
        self._ref_um_data = ref_um_data
        self._ref_cond_data = ref_cond_data

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SessionRule of this SessionRule.  # noqa: E501
        :rtype: SessionRule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_sess_ambr(self):
        """Gets the auth_sess_ambr of this SessionRule.


        :return: The auth_sess_ambr of this SessionRule.
        :rtype: Ambr
        """
        return self._auth_sess_ambr

    @auth_sess_ambr.setter
    def auth_sess_ambr(self, auth_sess_ambr):
        """Sets the auth_sess_ambr of this SessionRule.


        :param auth_sess_ambr: The auth_sess_ambr of this SessionRule.
        :type auth_sess_ambr: Ambr
        """

        self._auth_sess_ambr = auth_sess_ambr

    @property
    def auth_def_qos(self):
        """Gets the auth_def_qos of this SessionRule.


        :return: The auth_def_qos of this SessionRule.
        :rtype: AuthorizedDefaultQos
        """
        return self._auth_def_qos

    @auth_def_qos.setter
    def auth_def_qos(self, auth_def_qos):
        """Sets the auth_def_qos of this SessionRule.


        :param auth_def_qos: The auth_def_qos of this SessionRule.
        :type auth_def_qos: AuthorizedDefaultQos
        """

        self._auth_def_qos = auth_def_qos

    @property
    def sess_rule_id(self):
        """Gets the sess_rule_id of this SessionRule.

        Univocally identifies the session rule within a PDU session.  # noqa: E501

        :return: The sess_rule_id of this SessionRule.
        :rtype: str
        """
        return self._sess_rule_id

    @sess_rule_id.setter
    def sess_rule_id(self, sess_rule_id):
        """Sets the sess_rule_id of this SessionRule.

        Univocally identifies the session rule within a PDU session.  # noqa: E501

        :param sess_rule_id: The sess_rule_id of this SessionRule.
        :type sess_rule_id: str
        """
        if sess_rule_id is None:
            raise ValueError("Invalid value for `sess_rule_id`, must not be `None`")  # noqa: E501

        self._sess_rule_id = sess_rule_id

    @property
    def ref_um_data(self):
        """Gets the ref_um_data of this SessionRule.

        A reference to UsageMonitoringData policy decision type. It is the umId described in subclause 5.6.2.12.  # noqa: E501

        :return: The ref_um_data of this SessionRule.
        :rtype: str
        """
        return self._ref_um_data

    @ref_um_data.setter
    def ref_um_data(self, ref_um_data):
        """Sets the ref_um_data of this SessionRule.

        A reference to UsageMonitoringData policy decision type. It is the umId described in subclause 5.6.2.12.  # noqa: E501

        :param ref_um_data: The ref_um_data of this SessionRule.
        :type ref_um_data: str
        """

        self._ref_um_data = ref_um_data

    @property
    def ref_cond_data(self):
        """Gets the ref_cond_data of this SessionRule.

        A reference to the condition data. It is the condId described in subclause 5.6.2.9.  # noqa: E501

        :return: The ref_cond_data of this SessionRule.
        :rtype: str
        """
        return self._ref_cond_data

    @ref_cond_data.setter
    def ref_cond_data(self, ref_cond_data):
        """Sets the ref_cond_data of this SessionRule.

        A reference to the condition data. It is the condId described in subclause 5.6.2.9.  # noqa: E501

        :param ref_cond_data: The ref_cond_data of this SessionRule.
        :type ref_cond_data: str
        """

        self._ref_cond_data = ref_cond_data
