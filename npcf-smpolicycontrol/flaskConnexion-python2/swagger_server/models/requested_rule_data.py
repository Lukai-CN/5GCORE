# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.requested_rule_data_type import RequestedRuleDataType  # noqa: F401,E501
from swagger_server import util


class RequestedRuleData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, ref_pcc_rule_ids=None, req_data=None):  # noqa: E501
        """RequestedRuleData - a model defined in Swagger

        :param ref_pcc_rule_ids: The ref_pcc_rule_ids of this RequestedRuleData.  # noqa: E501
        :type ref_pcc_rule_ids: List[str]
        :param req_data: The req_data of this RequestedRuleData.  # noqa: E501
        :type req_data: List[RequestedRuleDataType]
        """
        self.swagger_types = {
            'ref_pcc_rule_ids': List[str],
            'req_data': List[RequestedRuleDataType]
        }

        self.attribute_map = {
            'ref_pcc_rule_ids': 'refPccRuleIds',
            'req_data': 'reqData'
        }
        self._ref_pcc_rule_ids = ref_pcc_rule_ids
        self._req_data = req_data

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RequestedRuleData of this RequestedRuleData.  # noqa: E501
        :rtype: RequestedRuleData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ref_pcc_rule_ids(self):
        """Gets the ref_pcc_rule_ids of this RequestedRuleData.

        An array of PCC rule id references to the PCC rules associated with the control data.  # noqa: E501

        :return: The ref_pcc_rule_ids of this RequestedRuleData.
        :rtype: List[str]
        """
        return self._ref_pcc_rule_ids

    @ref_pcc_rule_ids.setter
    def ref_pcc_rule_ids(self, ref_pcc_rule_ids):
        """Sets the ref_pcc_rule_ids of this RequestedRuleData.

        An array of PCC rule id references to the PCC rules associated with the control data.  # noqa: E501

        :param ref_pcc_rule_ids: The ref_pcc_rule_ids of this RequestedRuleData.
        :type ref_pcc_rule_ids: List[str]
        """
        if ref_pcc_rule_ids is None:
            raise ValueError("Invalid value for `ref_pcc_rule_ids`, must not be `None`")  # noqa: E501

        self._ref_pcc_rule_ids = ref_pcc_rule_ids

    @property
    def req_data(self):
        """Gets the req_data of this RequestedRuleData.

        Array of requested rule data type elements indicating what type of rule data is requested for the corresponding referenced PCC rules.  # noqa: E501

        :return: The req_data of this RequestedRuleData.
        :rtype: List[RequestedRuleDataType]
        """
        return self._req_data

    @req_data.setter
    def req_data(self, req_data):
        """Sets the req_data of this RequestedRuleData.

        Array of requested rule data type elements indicating what type of rule data is requested for the corresponding referenced PCC rules.  # noqa: E501

        :param req_data: The req_data of this RequestedRuleData.
        :type req_data: List[RequestedRuleDataType]
        """
        if req_data is None:
            raise ValueError("Invalid value for `req_data`, must not be `None`")  # noqa: E501

        self._req_data = req_data
