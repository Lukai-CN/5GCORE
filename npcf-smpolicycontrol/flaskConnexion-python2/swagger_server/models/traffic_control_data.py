# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.flow_status import FlowStatus  # noqa: F401,E501
from swagger_server.models.redirect_information import RedirectInformation  # noqa: F401,E501
from swagger_server.models.route_to_location import RouteToLocation  # noqa: F401,E501
from swagger_server.models.up_path_chg_event import UpPathChgEvent  # noqa: F401,E501
from swagger_server import util


class TrafficControlData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, tc_id=None, flow_status=None, redirect_info=None, mute_notif=None, traffic_steering_pol_id_dl=None, traffic_steering_pol_id_ul=None, route_to_locs=None, up_path_chg_event=None):  # noqa: E501
        """TrafficControlData - a model defined in Swagger

        :param tc_id: The tc_id of this TrafficControlData.  # noqa: E501
        :type tc_id: str
        :param flow_status: The flow_status of this TrafficControlData.  # noqa: E501
        :type flow_status: FlowStatus
        :param redirect_info: The redirect_info of this TrafficControlData.  # noqa: E501
        :type redirect_info: RedirectInformation
        :param mute_notif: The mute_notif of this TrafficControlData.  # noqa: E501
        :type mute_notif: bool
        :param traffic_steering_pol_id_dl: The traffic_steering_pol_id_dl of this TrafficControlData.  # noqa: E501
        :type traffic_steering_pol_id_dl: str
        :param traffic_steering_pol_id_ul: The traffic_steering_pol_id_ul of this TrafficControlData.  # noqa: E501
        :type traffic_steering_pol_id_ul: str
        :param route_to_locs: The route_to_locs of this TrafficControlData.  # noqa: E501
        :type route_to_locs: List[RouteToLocation]
        :param up_path_chg_event: The up_path_chg_event of this TrafficControlData.  # noqa: E501
        :type up_path_chg_event: UpPathChgEvent
        """
        self.swagger_types = {
            'tc_id': str,
            'flow_status': FlowStatus,
            'redirect_info': RedirectInformation,
            'mute_notif': bool,
            'traffic_steering_pol_id_dl': str,
            'traffic_steering_pol_id_ul': str,
            'route_to_locs': List[RouteToLocation],
            'up_path_chg_event': UpPathChgEvent
        }

        self.attribute_map = {
            'tc_id': 'tcId',
            'flow_status': 'flowStatus',
            'redirect_info': 'redirectInfo',
            'mute_notif': 'muteNotif',
            'traffic_steering_pol_id_dl': 'trafficSteeringPolIdDl',
            'traffic_steering_pol_id_ul': 'trafficSteeringPolIdUl',
            'route_to_locs': 'routeToLocs',
            'up_path_chg_event': 'upPathChgEvent'
        }
        self._tc_id = tc_id
        self._flow_status = flow_status
        self._redirect_info = redirect_info
        self._mute_notif = mute_notif
        self._traffic_steering_pol_id_dl = traffic_steering_pol_id_dl
        self._traffic_steering_pol_id_ul = traffic_steering_pol_id_ul
        self._route_to_locs = route_to_locs
        self._up_path_chg_event = up_path_chg_event

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TrafficControlData of this TrafficControlData.  # noqa: E501
        :rtype: TrafficControlData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tc_id(self):
        """Gets the tc_id of this TrafficControlData.

        Univocally identifies the traffic control policy data within a PDU session.  # noqa: E501

        :return: The tc_id of this TrafficControlData.
        :rtype: str
        """
        return self._tc_id

    @tc_id.setter
    def tc_id(self, tc_id):
        """Sets the tc_id of this TrafficControlData.

        Univocally identifies the traffic control policy data within a PDU session.  # noqa: E501

        :param tc_id: The tc_id of this TrafficControlData.
        :type tc_id: str
        """
        if tc_id is None:
            raise ValueError("Invalid value for `tc_id`, must not be `None`")  # noqa: E501

        self._tc_id = tc_id

    @property
    def flow_status(self):
        """Gets the flow_status of this TrafficControlData.


        :return: The flow_status of this TrafficControlData.
        :rtype: FlowStatus
        """
        return self._flow_status

    @flow_status.setter
    def flow_status(self, flow_status):
        """Sets the flow_status of this TrafficControlData.


        :param flow_status: The flow_status of this TrafficControlData.
        :type flow_status: FlowStatus
        """

        self._flow_status = flow_status

    @property
    def redirect_info(self):
        """Gets the redirect_info of this TrafficControlData.


        :return: The redirect_info of this TrafficControlData.
        :rtype: RedirectInformation
        """
        return self._redirect_info

    @redirect_info.setter
    def redirect_info(self, redirect_info):
        """Sets the redirect_info of this TrafficControlData.


        :param redirect_info: The redirect_info of this TrafficControlData.
        :type redirect_info: RedirectInformation
        """

        self._redirect_info = redirect_info

    @property
    def mute_notif(self):
        """Gets the mute_notif of this TrafficControlData.

        Indicates whether applicat'on's start or stop notification is to be muted.  # noqa: E501

        :return: The mute_notif of this TrafficControlData.
        :rtype: bool
        """
        return self._mute_notif

    @mute_notif.setter
    def mute_notif(self, mute_notif):
        """Sets the mute_notif of this TrafficControlData.

        Indicates whether applicat'on's start or stop notification is to be muted.  # noqa: E501

        :param mute_notif: The mute_notif of this TrafficControlData.
        :type mute_notif: bool
        """

        self._mute_notif = mute_notif

    @property
    def traffic_steering_pol_id_dl(self):
        """Gets the traffic_steering_pol_id_dl of this TrafficControlData.

        Reference to a pre-configured traffic steering policy for downlink traffic at the SMF.  # noqa: E501

        :return: The traffic_steering_pol_id_dl of this TrafficControlData.
        :rtype: str
        """
        return self._traffic_steering_pol_id_dl

    @traffic_steering_pol_id_dl.setter
    def traffic_steering_pol_id_dl(self, traffic_steering_pol_id_dl):
        """Sets the traffic_steering_pol_id_dl of this TrafficControlData.

        Reference to a pre-configured traffic steering policy for downlink traffic at the SMF.  # noqa: E501

        :param traffic_steering_pol_id_dl: The traffic_steering_pol_id_dl of this TrafficControlData.
        :type traffic_steering_pol_id_dl: str
        """

        self._traffic_steering_pol_id_dl = traffic_steering_pol_id_dl

    @property
    def traffic_steering_pol_id_ul(self):
        """Gets the traffic_steering_pol_id_ul of this TrafficControlData.

        Reference to a pre-configured traffic steering policy for uplink traffic at the SMF.  # noqa: E501

        :return: The traffic_steering_pol_id_ul of this TrafficControlData.
        :rtype: str
        """
        return self._traffic_steering_pol_id_ul

    @traffic_steering_pol_id_ul.setter
    def traffic_steering_pol_id_ul(self, traffic_steering_pol_id_ul):
        """Sets the traffic_steering_pol_id_ul of this TrafficControlData.

        Reference to a pre-configured traffic steering policy for uplink traffic at the SMF.  # noqa: E501

        :param traffic_steering_pol_id_ul: The traffic_steering_pol_id_ul of this TrafficControlData.
        :type traffic_steering_pol_id_ul: str
        """

        self._traffic_steering_pol_id_ul = traffic_steering_pol_id_ul

    @property
    def route_to_locs(self):
        """Gets the route_to_locs of this TrafficControlData.

        A list of location which the traffic shall be routed to for the AF request  # noqa: E501

        :return: The route_to_locs of this TrafficControlData.
        :rtype: List[RouteToLocation]
        """
        return self._route_to_locs

    @route_to_locs.setter
    def route_to_locs(self, route_to_locs):
        """Sets the route_to_locs of this TrafficControlData.

        A list of location which the traffic shall be routed to for the AF request  # noqa: E501

        :param route_to_locs: The route_to_locs of this TrafficControlData.
        :type route_to_locs: List[RouteToLocation]
        """

        self._route_to_locs = route_to_locs

    @property
    def up_path_chg_event(self):
        """Gets the up_path_chg_event of this TrafficControlData.


        :return: The up_path_chg_event of this TrafficControlData.
        :rtype: UpPathChgEvent
        """
        return self._up_path_chg_event

    @up_path_chg_event.setter
    def up_path_chg_event(self, up_path_chg_event):
        """Sets the up_path_chg_event of this TrafficControlData.


        :param up_path_chg_event: The up_path_chg_event of this TrafficControlData.
        :type up_path_chg_event: UpPathChgEvent
        """

        self._up_path_chg_event = up_path_chg_event
