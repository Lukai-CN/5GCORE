# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.acc_net_ch_id import AccNetChId  # noqa: F401,E501
from swagger_server.models.acc_net_charging_address import AccNetChargingAddress  # noqa: F401,E501
from swagger_server.models.access_type import AccessType  # noqa: F401,E501
from swagger_server.models.ambr import Ambr  # noqa: F401,E501
from swagger_server.models.dnn import Dnn  # noqa: F401,E501
from swagger_server.models.gpsi import Gpsi  # noqa: F401,E501
from swagger_server.models.group_id import GroupId  # noqa: F401,E501
from swagger_server.models.ipv4_addr import Ipv4Addr  # noqa: F401,E501
from swagger_server.models.ipv6_prefix import Ipv6Prefix  # noqa: F401,E501
from swagger_server.models.network_id import NetworkId  # noqa: F401,E501
from swagger_server.models.nf_instance_id import NfInstanceId  # noqa: F401,E501
from swagger_server.models.pdu_session_id import PduSessionId  # noqa: F401,E501
from swagger_server.models.pdu_session_type import PduSessionType  # noqa: F401,E501
from swagger_server.models.pei import Pei  # noqa: F401,E501
from swagger_server.models.qos_flow_usage import QosFlowUsage  # noqa: F401,E501
from swagger_server.models.rat_type import RatType  # noqa: F401,E501
from swagger_server.models.serving_nf_identity import ServingNfIdentity  # noqa: F401,E501
from swagger_server.models.snssai import Snssai  # noqa: F401,E501
from swagger_server.models.subscribed_default_qos import SubscribedDefaultQos  # noqa: F401,E501
from swagger_server.models.supi import Supi  # noqa: F401,E501
from swagger_server.models.supported_features import SupportedFeatures  # noqa: F401,E501
from swagger_server.models.time_zone import TimeZone  # noqa: F401,E501
from swagger_server.models.trace_data import TraceData  # noqa: F401,E501
from swagger_server.models.uri import Uri  # noqa: F401,E501
from swagger_server.models.user_location import UserLocation  # noqa: F401,E501
from swagger_server import util


class SmPolicyContextData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, acc_net_ch_id=None, charg_entity_addr=None, gpsi=None, supi=None, inter_grp_ids=None, pdu_session_id=None, pdu_session_type=None, chargingcharacteristics=None, dnn=None, notification_uri=None, access_type=None, rat_type=None, serving_network=None, user_location_info=None, ue_time_zone=None, pei=None, ipv4_address=None, ipv6_address_prefix=None, ip_domain=None, subs_sess_ambr=None, subs_def_qos=None, num_of_pack_filter=None, online=None, offline=None, _3gpp_ps_data_off_status=None, ref_qos_indication=None, trace_req=None, slice_info=None, qos_flow_usage=None, serv_nf_id=None, supp_feat=None, smf_id=None, recovery_time=None):  # noqa: E501
        """SmPolicyContextData - a model defined in Swagger

        :param acc_net_ch_id: The acc_net_ch_id of this SmPolicyContextData.  # noqa: E501
        :type acc_net_ch_id: AccNetChId
        :param charg_entity_addr: The charg_entity_addr of this SmPolicyContextData.  # noqa: E501
        :type charg_entity_addr: AccNetChargingAddress
        :param gpsi: The gpsi of this SmPolicyContextData.  # noqa: E501
        :type gpsi: Gpsi
        :param supi: The supi of this SmPolicyContextData.  # noqa: E501
        :type supi: Supi
        :param inter_grp_ids: The inter_grp_ids of this SmPolicyContextData.  # noqa: E501
        :type inter_grp_ids: List[GroupId]
        :param pdu_session_id: The pdu_session_id of this SmPolicyContextData.  # noqa: E501
        :type pdu_session_id: PduSessionId
        :param pdu_session_type: The pdu_session_type of this SmPolicyContextData.  # noqa: E501
        :type pdu_session_type: PduSessionType
        :param chargingcharacteristics: The chargingcharacteristics of this SmPolicyContextData.  # noqa: E501
        :type chargingcharacteristics: str
        :param dnn: The dnn of this SmPolicyContextData.  # noqa: E501
        :type dnn: Dnn
        :param notification_uri: The notification_uri of this SmPolicyContextData.  # noqa: E501
        :type notification_uri: Uri
        :param access_type: The access_type of this SmPolicyContextData.  # noqa: E501
        :type access_type: AccessType
        :param rat_type: The rat_type of this SmPolicyContextData.  # noqa: E501
        :type rat_type: RatType
        :param serving_network: The serving_network of this SmPolicyContextData.  # noqa: E501
        :type serving_network: NetworkId
        :param user_location_info: The user_location_info of this SmPolicyContextData.  # noqa: E501
        :type user_location_info: UserLocation
        :param ue_time_zone: The ue_time_zone of this SmPolicyContextData.  # noqa: E501
        :type ue_time_zone: TimeZone
        :param pei: The pei of this SmPolicyContextData.  # noqa: E501
        :type pei: Pei
        :param ipv4_address: The ipv4_address of this SmPolicyContextData.  # noqa: E501
        :type ipv4_address: Ipv4Addr
        :param ipv6_address_prefix: The ipv6_address_prefix of this SmPolicyContextData.  # noqa: E501
        :type ipv6_address_prefix: Ipv6Prefix
        :param ip_domain: The ip_domain of this SmPolicyContextData.  # noqa: E501
        :type ip_domain: str
        :param subs_sess_ambr: The subs_sess_ambr of this SmPolicyContextData.  # noqa: E501
        :type subs_sess_ambr: Ambr
        :param subs_def_qos: The subs_def_qos of this SmPolicyContextData.  # noqa: E501
        :type subs_def_qos: SubscribedDefaultQos
        :param num_of_pack_filter: The num_of_pack_filter of this SmPolicyContextData.  # noqa: E501
        :type num_of_pack_filter: int
        :param online: The online of this SmPolicyContextData.  # noqa: E501
        :type online: bool
        :param offline: The offline of this SmPolicyContextData.  # noqa: E501
        :type offline: bool
        :param _3gpp_ps_data_off_status: The _3gpp_ps_data_off_status of this SmPolicyContextData.  # noqa: E501
        :type _3gpp_ps_data_off_status: bool
        :param ref_qos_indication: The ref_qos_indication of this SmPolicyContextData.  # noqa: E501
        :type ref_qos_indication: bool
        :param trace_req: The trace_req of this SmPolicyContextData.  # noqa: E501
        :type trace_req: TraceData
        :param slice_info: The slice_info of this SmPolicyContextData.  # noqa: E501
        :type slice_info: Snssai
        :param qos_flow_usage: The qos_flow_usage of this SmPolicyContextData.  # noqa: E501
        :type qos_flow_usage: QosFlowUsage
        :param serv_nf_id: The serv_nf_id of this SmPolicyContextData.  # noqa: E501
        :type serv_nf_id: ServingNfIdentity
        :param supp_feat: The supp_feat of this SmPolicyContextData.  # noqa: E501
        :type supp_feat: SupportedFeatures
        :param smf_id: The smf_id of this SmPolicyContextData.  # noqa: E501
        :type smf_id: NfInstanceId
        :param recovery_time: The recovery_time of this SmPolicyContextData.  # noqa: E501
        :type recovery_time: datetime
        """
        self.swagger_types = {
            'acc_net_ch_id': AccNetChId,
            'charg_entity_addr': AccNetChargingAddress,
            'gpsi': Gpsi,
            'supi': Supi,
            'inter_grp_ids': List[GroupId],
            'pdu_session_id': PduSessionId,
            'pdu_session_type': PduSessionType,
            'chargingcharacteristics': str,
            'dnn': Dnn,
            'notification_uri': Uri,
            'access_type': AccessType,
            'rat_type': RatType,
            'serving_network': NetworkId,
            'user_location_info': UserLocation,
            'ue_time_zone': TimeZone,
            'pei': Pei,
            'ipv4_address': Ipv4Addr,
            'ipv6_address_prefix': Ipv6Prefix,
            'ip_domain': str,
            'subs_sess_ambr': Ambr,
            'subs_def_qos': SubscribedDefaultQos,
            'num_of_pack_filter': int,
            'online': bool,
            'offline': bool,
            '_3gpp_ps_data_off_status': bool,
            'ref_qos_indication': bool,
            'trace_req': TraceData,
            'slice_info': Snssai,
            'qos_flow_usage': QosFlowUsage,
            'serv_nf_id': ServingNfIdentity,
            'supp_feat': SupportedFeatures,
            'smf_id': NfInstanceId,
            'recovery_time': datetime
        }

        self.attribute_map = {
            'acc_net_ch_id': 'accNetChId',
            'charg_entity_addr': 'chargEntityAddr',
            'gpsi': 'gpsi',
            'supi': 'supi',
            'inter_grp_ids': 'interGrpIds',
            'pdu_session_id': 'pduSessionId',
            'pdu_session_type': 'pduSessionType',
            'chargingcharacteristics': 'chargingcharacteristics',
            'dnn': 'dnn',
            'notification_uri': 'notificationUri',
            'access_type': 'accessType',
            'rat_type': 'ratType',
            'serving_network': 'servingNetwork',
            'user_location_info': 'userLocationInfo',
            'ue_time_zone': 'ueTimeZone',
            'pei': 'pei',
            'ipv4_address': 'ipv4Address',
            'ipv6_address_prefix': 'ipv6AddressPrefix',
            'ip_domain': 'ipDomain',
            'subs_sess_ambr': 'subsSessAmbr',
            'subs_def_qos': 'subsDefQos',
            'num_of_pack_filter': 'numOfPackFilter',
            'online': 'online',
            'offline': 'offline',
            '_3gpp_ps_data_off_status': '3gppPsDataOffStatus',
            'ref_qos_indication': 'refQosIndication',
            'trace_req': 'traceReq',
            'slice_info': 'sliceInfo',
            'qos_flow_usage': 'qosFlowUsage',
            'serv_nf_id': 'servNfId',
            'supp_feat': 'suppFeat',
            'smf_id': 'smfId',
            'recovery_time': 'recoveryTime'
        }
        self._acc_net_ch_id = acc_net_ch_id
        self._charg_entity_addr = charg_entity_addr
        self._gpsi = gpsi
        self._supi = supi
        self._inter_grp_ids = inter_grp_ids
        self._pdu_session_id = pdu_session_id
        self._pdu_session_type = pdu_session_type
        self._chargingcharacteristics = chargingcharacteristics
        self._dnn = dnn
        self._notification_uri = notification_uri
        self._access_type = access_type
        self._rat_type = rat_type
        self._serving_network = serving_network
        self._user_location_info = user_location_info
        self._ue_time_zone = ue_time_zone
        self._pei = pei
        self._ipv4_address = ipv4_address
        self._ipv6_address_prefix = ipv6_address_prefix
        self._ip_domain = ip_domain
        self._subs_sess_ambr = subs_sess_ambr
        self._subs_def_qos = subs_def_qos
        self._num_of_pack_filter = num_of_pack_filter
        self._online = online
        self._offline = offline
        self.__3gpp_ps_data_off_status = _3gpp_ps_data_off_status
        self._ref_qos_indication = ref_qos_indication
        self._trace_req = trace_req
        self._slice_info = slice_info
        self._qos_flow_usage = qos_flow_usage
        self._serv_nf_id = serv_nf_id
        self._supp_feat = supp_feat
        self._smf_id = smf_id
        self._recovery_time = recovery_time

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SmPolicyContextData of this SmPolicyContextData.  # noqa: E501
        :rtype: SmPolicyContextData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acc_net_ch_id(self):
        """Gets the acc_net_ch_id of this SmPolicyContextData.


        :return: The acc_net_ch_id of this SmPolicyContextData.
        :rtype: AccNetChId
        """
        return self._acc_net_ch_id

    @acc_net_ch_id.setter
    def acc_net_ch_id(self, acc_net_ch_id):
        """Sets the acc_net_ch_id of this SmPolicyContextData.


        :param acc_net_ch_id: The acc_net_ch_id of this SmPolicyContextData.
        :type acc_net_ch_id: AccNetChId
        """

        self._acc_net_ch_id = acc_net_ch_id

    @property
    def charg_entity_addr(self):
        """Gets the charg_entity_addr of this SmPolicyContextData.


        :return: The charg_entity_addr of this SmPolicyContextData.
        :rtype: AccNetChargingAddress
        """
        return self._charg_entity_addr

    @charg_entity_addr.setter
    def charg_entity_addr(self, charg_entity_addr):
        """Sets the charg_entity_addr of this SmPolicyContextData.


        :param charg_entity_addr: The charg_entity_addr of this SmPolicyContextData.
        :type charg_entity_addr: AccNetChargingAddress
        """

        self._charg_entity_addr = charg_entity_addr

    @property
    def gpsi(self):
        """Gets the gpsi of this SmPolicyContextData.


        :return: The gpsi of this SmPolicyContextData.
        :rtype: Gpsi
        """
        return self._gpsi

    @gpsi.setter
    def gpsi(self, gpsi):
        """Sets the gpsi of this SmPolicyContextData.


        :param gpsi: The gpsi of this SmPolicyContextData.
        :type gpsi: Gpsi
        """

        self._gpsi = gpsi

    @property
    def supi(self):
        """Gets the supi of this SmPolicyContextData.


        :return: The supi of this SmPolicyContextData.
        :rtype: Supi
        """
        return self._supi

    @supi.setter
    def supi(self, supi):
        """Sets the supi of this SmPolicyContextData.


        :param supi: The supi of this SmPolicyContextData.
        :type supi: Supi
        """
        if supi is None:
            raise ValueError("Invalid value for `supi`, must not be `None`")  # noqa: E501

        self._supi = supi

    @property
    def inter_grp_ids(self):
        """Gets the inter_grp_ids of this SmPolicyContextData.


        :return: The inter_grp_ids of this SmPolicyContextData.
        :rtype: List[GroupId]
        """
        return self._inter_grp_ids

    @inter_grp_ids.setter
    def inter_grp_ids(self, inter_grp_ids):
        """Sets the inter_grp_ids of this SmPolicyContextData.


        :param inter_grp_ids: The inter_grp_ids of this SmPolicyContextData.
        :type inter_grp_ids: List[GroupId]
        """

        self._inter_grp_ids = inter_grp_ids

    @property
    def pdu_session_id(self):
        """Gets the pdu_session_id of this SmPolicyContextData.


        :return: The pdu_session_id of this SmPolicyContextData.
        :rtype: PduSessionId
        """
        return self._pdu_session_id

    @pdu_session_id.setter
    def pdu_session_id(self, pdu_session_id):
        """Sets the pdu_session_id of this SmPolicyContextData.


        :param pdu_session_id: The pdu_session_id of this SmPolicyContextData.
        :type pdu_session_id: PduSessionId
        """
        if pdu_session_id is None:
            raise ValueError("Invalid value for `pdu_session_id`, must not be `None`")  # noqa: E501

        self._pdu_session_id = pdu_session_id

    @property
    def pdu_session_type(self):
        """Gets the pdu_session_type of this SmPolicyContextData.


        :return: The pdu_session_type of this SmPolicyContextData.
        :rtype: PduSessionType
        """
        return self._pdu_session_type

    @pdu_session_type.setter
    def pdu_session_type(self, pdu_session_type):
        """Sets the pdu_session_type of this SmPolicyContextData.


        :param pdu_session_type: The pdu_session_type of this SmPolicyContextData.
        :type pdu_session_type: PduSessionType
        """
        if pdu_session_type is None:
            raise ValueError("Invalid value for `pdu_session_type`, must not be `None`")  # noqa: E501

        self._pdu_session_type = pdu_session_type

    @property
    def chargingcharacteristics(self):
        """Gets the chargingcharacteristics of this SmPolicyContextData.


        :return: The chargingcharacteristics of this SmPolicyContextData.
        :rtype: str
        """
        return self._chargingcharacteristics

    @chargingcharacteristics.setter
    def chargingcharacteristics(self, chargingcharacteristics):
        """Sets the chargingcharacteristics of this SmPolicyContextData.


        :param chargingcharacteristics: The chargingcharacteristics of this SmPolicyContextData.
        :type chargingcharacteristics: str
        """

        self._chargingcharacteristics = chargingcharacteristics

    @property
    def dnn(self):
        """Gets the dnn of this SmPolicyContextData.


        :return: The dnn of this SmPolicyContextData.
        :rtype: Dnn
        """
        return self._dnn

    @dnn.setter
    def dnn(self, dnn):
        """Sets the dnn of this SmPolicyContextData.


        :param dnn: The dnn of this SmPolicyContextData.
        :type dnn: Dnn
        """
        if dnn is None:
            raise ValueError("Invalid value for `dnn`, must not be `None`")  # noqa: E501

        self._dnn = dnn

    @property
    def notification_uri(self):
        """Gets the notification_uri of this SmPolicyContextData.


        :return: The notification_uri of this SmPolicyContextData.
        :rtype: Uri
        """
        return self._notification_uri

    @notification_uri.setter
    def notification_uri(self, notification_uri):
        """Sets the notification_uri of this SmPolicyContextData.


        :param notification_uri: The notification_uri of this SmPolicyContextData.
        :type notification_uri: Uri
        """
        if notification_uri is None:
            raise ValueError("Invalid value for `notification_uri`, must not be `None`")  # noqa: E501

        self._notification_uri = notification_uri

    @property
    def access_type(self):
        """Gets the access_type of this SmPolicyContextData.


        :return: The access_type of this SmPolicyContextData.
        :rtype: AccessType
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this SmPolicyContextData.


        :param access_type: The access_type of this SmPolicyContextData.
        :type access_type: AccessType
        """

        self._access_type = access_type

    @property
    def rat_type(self):
        """Gets the rat_type of this SmPolicyContextData.


        :return: The rat_type of this SmPolicyContextData.
        :rtype: RatType
        """
        return self._rat_type

    @rat_type.setter
    def rat_type(self, rat_type):
        """Sets the rat_type of this SmPolicyContextData.


        :param rat_type: The rat_type of this SmPolicyContextData.
        :type rat_type: RatType
        """

        self._rat_type = rat_type

    @property
    def serving_network(self):
        """Gets the serving_network of this SmPolicyContextData.


        :return: The serving_network of this SmPolicyContextData.
        :rtype: NetworkId
        """
        return self._serving_network

    @serving_network.setter
    def serving_network(self, serving_network):
        """Sets the serving_network of this SmPolicyContextData.


        :param serving_network: The serving_network of this SmPolicyContextData.
        :type serving_network: NetworkId
        """

        self._serving_network = serving_network

    @property
    def user_location_info(self):
        """Gets the user_location_info of this SmPolicyContextData.


        :return: The user_location_info of this SmPolicyContextData.
        :rtype: UserLocation
        """
        return self._user_location_info

    @user_location_info.setter
    def user_location_info(self, user_location_info):
        """Sets the user_location_info of this SmPolicyContextData.


        :param user_location_info: The user_location_info of this SmPolicyContextData.
        :type user_location_info: UserLocation
        """

        self._user_location_info = user_location_info

    @property
    def ue_time_zone(self):
        """Gets the ue_time_zone of this SmPolicyContextData.


        :return: The ue_time_zone of this SmPolicyContextData.
        :rtype: TimeZone
        """
        return self._ue_time_zone

    @ue_time_zone.setter
    def ue_time_zone(self, ue_time_zone):
        """Sets the ue_time_zone of this SmPolicyContextData.


        :param ue_time_zone: The ue_time_zone of this SmPolicyContextData.
        :type ue_time_zone: TimeZone
        """

        self._ue_time_zone = ue_time_zone

    @property
    def pei(self):
        """Gets the pei of this SmPolicyContextData.


        :return: The pei of this SmPolicyContextData.
        :rtype: Pei
        """
        return self._pei

    @pei.setter
    def pei(self, pei):
        """Sets the pei of this SmPolicyContextData.


        :param pei: The pei of this SmPolicyContextData.
        :type pei: Pei
        """

        self._pei = pei

    @property
    def ipv4_address(self):
        """Gets the ipv4_address of this SmPolicyContextData.


        :return: The ipv4_address of this SmPolicyContextData.
        :rtype: Ipv4Addr
        """
        return self._ipv4_address

    @ipv4_address.setter
    def ipv4_address(self, ipv4_address):
        """Sets the ipv4_address of this SmPolicyContextData.


        :param ipv4_address: The ipv4_address of this SmPolicyContextData.
        :type ipv4_address: Ipv4Addr
        """

        self._ipv4_address = ipv4_address

    @property
    def ipv6_address_prefix(self):
        """Gets the ipv6_address_prefix of this SmPolicyContextData.


        :return: The ipv6_address_prefix of this SmPolicyContextData.
        :rtype: Ipv6Prefix
        """
        return self._ipv6_address_prefix

    @ipv6_address_prefix.setter
    def ipv6_address_prefix(self, ipv6_address_prefix):
        """Sets the ipv6_address_prefix of this SmPolicyContextData.


        :param ipv6_address_prefix: The ipv6_address_prefix of this SmPolicyContextData.
        :type ipv6_address_prefix: Ipv6Prefix
        """

        self._ipv6_address_prefix = ipv6_address_prefix

    @property
    def ip_domain(self):
        """Gets the ip_domain of this SmPolicyContextData.

        Indicates the IPv4 address domain  # noqa: E501

        :return: The ip_domain of this SmPolicyContextData.
        :rtype: str
        """
        return self._ip_domain

    @ip_domain.setter
    def ip_domain(self, ip_domain):
        """Sets the ip_domain of this SmPolicyContextData.

        Indicates the IPv4 address domain  # noqa: E501

        :param ip_domain: The ip_domain of this SmPolicyContextData.
        :type ip_domain: str
        """

        self._ip_domain = ip_domain

    @property
    def subs_sess_ambr(self):
        """Gets the subs_sess_ambr of this SmPolicyContextData.


        :return: The subs_sess_ambr of this SmPolicyContextData.
        :rtype: Ambr
        """
        return self._subs_sess_ambr

    @subs_sess_ambr.setter
    def subs_sess_ambr(self, subs_sess_ambr):
        """Sets the subs_sess_ambr of this SmPolicyContextData.


        :param subs_sess_ambr: The subs_sess_ambr of this SmPolicyContextData.
        :type subs_sess_ambr: Ambr
        """

        self._subs_sess_ambr = subs_sess_ambr

    @property
    def subs_def_qos(self):
        """Gets the subs_def_qos of this SmPolicyContextData.


        :return: The subs_def_qos of this SmPolicyContextData.
        :rtype: SubscribedDefaultQos
        """
        return self._subs_def_qos

    @subs_def_qos.setter
    def subs_def_qos(self, subs_def_qos):
        """Sets the subs_def_qos of this SmPolicyContextData.


        :param subs_def_qos: The subs_def_qos of this SmPolicyContextData.
        :type subs_def_qos: SubscribedDefaultQos
        """

        self._subs_def_qos = subs_def_qos

    @property
    def num_of_pack_filter(self):
        """Gets the num_of_pack_filter of this SmPolicyContextData.

        Contains the number of supported packet filter for signalled QoS rules.  # noqa: E501

        :return: The num_of_pack_filter of this SmPolicyContextData.
        :rtype: int
        """
        return self._num_of_pack_filter

    @num_of_pack_filter.setter
    def num_of_pack_filter(self, num_of_pack_filter):
        """Sets the num_of_pack_filter of this SmPolicyContextData.

        Contains the number of supported packet filter for signalled QoS rules.  # noqa: E501

        :param num_of_pack_filter: The num_of_pack_filter of this SmPolicyContextData.
        :type num_of_pack_filter: int
        """

        self._num_of_pack_filter = num_of_pack_filter

    @property
    def online(self):
        """Gets the online of this SmPolicyContextData.

        If it is included and set to true, the online charging is applied to the PDU session.  # noqa: E501

        :return: The online of this SmPolicyContextData.
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this SmPolicyContextData.

        If it is included and set to true, the online charging is applied to the PDU session.  # noqa: E501

        :param online: The online of this SmPolicyContextData.
        :type online: bool
        """

        self._online = online

    @property
    def offline(self):
        """Gets the offline of this SmPolicyContextData.

        If it is included and set to true, the offline charging is applied to the PDU session.  # noqa: E501

        :return: The offline of this SmPolicyContextData.
        :rtype: bool
        """
        return self._offline

    @offline.setter
    def offline(self, offline):
        """Sets the offline of this SmPolicyContextData.

        If it is included and set to true, the offline charging is applied to the PDU session.  # noqa: E501

        :param offline: The offline of this SmPolicyContextData.
        :type offline: bool
        """

        self._offline = offline

    @property
    def _3gpp_ps_data_off_status(self):
        """Gets the _3gpp_ps_data_off_status of this SmPolicyContextData.

        If it is included and set to true, the 3GPP PS Data Off is activated by the UE.  # noqa: E501

        :return: The _3gpp_ps_data_off_status of this SmPolicyContextData.
        :rtype: bool
        """
        return self.__3gpp_ps_data_off_status

    @_3gpp_ps_data_off_status.setter
    def _3gpp_ps_data_off_status(self, _3gpp_ps_data_off_status):
        """Sets the _3gpp_ps_data_off_status of this SmPolicyContextData.

        If it is included and set to true, the 3GPP PS Data Off is activated by the UE.  # noqa: E501

        :param _3gpp_ps_data_off_status: The _3gpp_ps_data_off_status of this SmPolicyContextData.
        :type _3gpp_ps_data_off_status: bool
        """

        self.__3gpp_ps_data_off_status = _3gpp_ps_data_off_status

    @property
    def ref_qos_indication(self):
        """Gets the ref_qos_indication of this SmPolicyContextData.

        If it is included and set to true, the reflective QoS is supported by the UE.  # noqa: E501

        :return: The ref_qos_indication of this SmPolicyContextData.
        :rtype: bool
        """
        return self._ref_qos_indication

    @ref_qos_indication.setter
    def ref_qos_indication(self, ref_qos_indication):
        """Sets the ref_qos_indication of this SmPolicyContextData.

        If it is included and set to true, the reflective QoS is supported by the UE.  # noqa: E501

        :param ref_qos_indication: The ref_qos_indication of this SmPolicyContextData.
        :type ref_qos_indication: bool
        """

        self._ref_qos_indication = ref_qos_indication

    @property
    def trace_req(self):
        """Gets the trace_req of this SmPolicyContextData.


        :return: The trace_req of this SmPolicyContextData.
        :rtype: TraceData
        """
        return self._trace_req

    @trace_req.setter
    def trace_req(self, trace_req):
        """Sets the trace_req of this SmPolicyContextData.


        :param trace_req: The trace_req of this SmPolicyContextData.
        :type trace_req: TraceData
        """

        self._trace_req = trace_req

    @property
    def slice_info(self):
        """Gets the slice_info of this SmPolicyContextData.


        :return: The slice_info of this SmPolicyContextData.
        :rtype: Snssai
        """
        return self._slice_info

    @slice_info.setter
    def slice_info(self, slice_info):
        """Sets the slice_info of this SmPolicyContextData.


        :param slice_info: The slice_info of this SmPolicyContextData.
        :type slice_info: Snssai
        """
        if slice_info is None:
            raise ValueError("Invalid value for `slice_info`, must not be `None`")  # noqa: E501

        self._slice_info = slice_info

    @property
    def qos_flow_usage(self):
        """Gets the qos_flow_usage of this SmPolicyContextData.


        :return: The qos_flow_usage of this SmPolicyContextData.
        :rtype: QosFlowUsage
        """
        return self._qos_flow_usage

    @qos_flow_usage.setter
    def qos_flow_usage(self, qos_flow_usage):
        """Sets the qos_flow_usage of this SmPolicyContextData.


        :param qos_flow_usage: The qos_flow_usage of this SmPolicyContextData.
        :type qos_flow_usage: QosFlowUsage
        """

        self._qos_flow_usage = qos_flow_usage

    @property
    def serv_nf_id(self):
        """Gets the serv_nf_id of this SmPolicyContextData.


        :return: The serv_nf_id of this SmPolicyContextData.
        :rtype: ServingNfIdentity
        """
        return self._serv_nf_id

    @serv_nf_id.setter
    def serv_nf_id(self, serv_nf_id):
        """Sets the serv_nf_id of this SmPolicyContextData.


        :param serv_nf_id: The serv_nf_id of this SmPolicyContextData.
        :type serv_nf_id: ServingNfIdentity
        """

        self._serv_nf_id = serv_nf_id

    @property
    def supp_feat(self):
        """Gets the supp_feat of this SmPolicyContextData.


        :return: The supp_feat of this SmPolicyContextData.
        :rtype: SupportedFeatures
        """
        return self._supp_feat

    @supp_feat.setter
    def supp_feat(self, supp_feat):
        """Sets the supp_feat of this SmPolicyContextData.


        :param supp_feat: The supp_feat of this SmPolicyContextData.
        :type supp_feat: SupportedFeatures
        """

        self._supp_feat = supp_feat

    @property
    def smf_id(self):
        """Gets the smf_id of this SmPolicyContextData.


        :return: The smf_id of this SmPolicyContextData.
        :rtype: NfInstanceId
        """
        return self._smf_id

    @smf_id.setter
    def smf_id(self, smf_id):
        """Sets the smf_id of this SmPolicyContextData.


        :param smf_id: The smf_id of this SmPolicyContextData.
        :type smf_id: NfInstanceId
        """

        self._smf_id = smf_id

    @property
    def recovery_time(self):
        """Gets the recovery_time of this SmPolicyContextData.


        :return: The recovery_time of this SmPolicyContextData.
        :rtype: datetime
        """
        return self._recovery_time

    @recovery_time.setter
    def recovery_time(self, recovery_time):
        """Sets the recovery_time of this SmPolicyContextData.


        :param recovery_time: The recovery_time of this SmPolicyContextData.
        :type recovery_time: datetime
        """

        self._recovery_time = recovery_time
