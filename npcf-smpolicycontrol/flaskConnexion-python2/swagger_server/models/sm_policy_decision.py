# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.charging_data import ChargingData  # noqa: F401,E501
from swagger_server.models.charging_information import ChargingInformation  # noqa: F401,E501
from swagger_server.models.condition_data import ConditionData  # noqa: F401,E501
from swagger_server.models.duration_sec import DurationSec  # noqa: F401,E501
from swagger_server.models.ip_index import IpIndex  # noqa: F401,E501
from swagger_server.models.pcc_rule import PccRule  # noqa: F401,E501
from swagger_server.models.policy_control_request_trigger import PolicyControlRequestTrigger  # noqa: F401,E501
from swagger_server.models.presence_info_rm import PresenceInfoRm  # noqa: F401,E501
from swagger_server.models.qos_characteristics import QosCharacteristics  # noqa: F401,E501
from swagger_server.models.qos_data import QosData  # noqa: F401,E501
from swagger_server.models.qos_flow_usage import QosFlowUsage  # noqa: F401,E501
from swagger_server.models.requested_rule_data import RequestedRuleData  # noqa: F401,E501
from swagger_server.models.requested_usage_data import RequestedUsageData  # noqa: F401,E501
from swagger_server.models.session_rule import SessionRule  # noqa: F401,E501
from swagger_server.models.supported_features import SupportedFeatures  # noqa: F401,E501
from swagger_server.models.traffic_control_data import TrafficControlData  # noqa: F401,E501
from swagger_server.models.usage_monitoring_data import UsageMonitoringData  # noqa: F401,E501
from swagger_server import util


class SmPolicyDecision(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, sess_rules=None, pcc_rules=None, pcscf_rest_indication=None, qos_decs=None, chg_decs=None, charging_info=None, traff_cont_decs=None, um_decs=None, qos_chars=None, reflective_qo_s_timer=None, conds=None, revalidation_time=None, offline=None, online=None, policy_ctrl_req_triggers=None, last_req_rule_data=None, last_req_usage_data=None, pra_infos=None, ipv4_index=None, ipv6_index=None, qos_flow_usage=None, supp_feat=None):  # noqa: E501
        """SmPolicyDecision - a model defined in Swagger

        :param sess_rules: The sess_rules of this SmPolicyDecision.  # noqa: E501
        :type sess_rules: Dict[str, SessionRule]
        :param pcc_rules: The pcc_rules of this SmPolicyDecision.  # noqa: E501
        :type pcc_rules: Dict[str, PccRule]
        :param pcscf_rest_indication: The pcscf_rest_indication of this SmPolicyDecision.  # noqa: E501
        :type pcscf_rest_indication: bool
        :param qos_decs: The qos_decs of this SmPolicyDecision.  # noqa: E501
        :type qos_decs: Dict[str, QosData]
        :param chg_decs: The chg_decs of this SmPolicyDecision.  # noqa: E501
        :type chg_decs: Dict[str, ChargingData]
        :param charging_info: The charging_info of this SmPolicyDecision.  # noqa: E501
        :type charging_info: ChargingInformation
        :param traff_cont_decs: The traff_cont_decs of this SmPolicyDecision.  # noqa: E501
        :type traff_cont_decs: Dict[str, TrafficControlData]
        :param um_decs: The um_decs of this SmPolicyDecision.  # noqa: E501
        :type um_decs: Dict[str, UsageMonitoringData]
        :param qos_chars: The qos_chars of this SmPolicyDecision.  # noqa: E501
        :type qos_chars: Dict[str, QosCharacteristics]
        :param reflective_qo_s_timer: The reflective_qo_s_timer of this SmPolicyDecision.  # noqa: E501
        :type reflective_qo_s_timer: DurationSec
        :param conds: The conds of this SmPolicyDecision.  # noqa: E501
        :type conds: Dict[str, ConditionData]
        :param revalidation_time: The revalidation_time of this SmPolicyDecision.  # noqa: E501
        :type revalidation_time: datetime
        :param offline: The offline of this SmPolicyDecision.  # noqa: E501
        :type offline: bool
        :param online: The online of this SmPolicyDecision.  # noqa: E501
        :type online: bool
        :param policy_ctrl_req_triggers: The policy_ctrl_req_triggers of this SmPolicyDecision.  # noqa: E501
        :type policy_ctrl_req_triggers: List[PolicyControlRequestTrigger]
        :param last_req_rule_data: The last_req_rule_data of this SmPolicyDecision.  # noqa: E501
        :type last_req_rule_data: List[RequestedRuleData]
        :param last_req_usage_data: The last_req_usage_data of this SmPolicyDecision.  # noqa: E501
        :type last_req_usage_data: RequestedUsageData
        :param pra_infos: The pra_infos of this SmPolicyDecision.  # noqa: E501
        :type pra_infos: Dict[str, PresenceInfoRm]
        :param ipv4_index: The ipv4_index of this SmPolicyDecision.  # noqa: E501
        :type ipv4_index: IpIndex
        :param ipv6_index: The ipv6_index of this SmPolicyDecision.  # noqa: E501
        :type ipv6_index: IpIndex
        :param qos_flow_usage: The qos_flow_usage of this SmPolicyDecision.  # noqa: E501
        :type qos_flow_usage: QosFlowUsage
        :param supp_feat: The supp_feat of this SmPolicyDecision.  # noqa: E501
        :type supp_feat: SupportedFeatures
        """
        self.swagger_types = {
            'sess_rules': Dict[str, SessionRule],
            'pcc_rules': Dict[str, PccRule],
            'pcscf_rest_indication': bool,
            'qos_decs': Dict[str, QosData],
            'chg_decs': Dict[str, ChargingData],
            'charging_info': ChargingInformation,
            'traff_cont_decs': Dict[str, TrafficControlData],
            'um_decs': Dict[str, UsageMonitoringData],
            'qos_chars': Dict[str, QosCharacteristics],
            'reflective_qo_s_timer': DurationSec,
            'conds': Dict[str, ConditionData],
            'revalidation_time': datetime,
            'offline': bool,
            'online': bool,
            'policy_ctrl_req_triggers': List[PolicyControlRequestTrigger],
            'last_req_rule_data': List[RequestedRuleData],
            'last_req_usage_data': RequestedUsageData,
            'pra_infos': Dict[str, PresenceInfoRm],
            'ipv4_index': IpIndex,
            'ipv6_index': IpIndex,
            'qos_flow_usage': QosFlowUsage,
            'supp_feat': SupportedFeatures
        }

        self.attribute_map = {
            'sess_rules': 'sessRules',
            'pcc_rules': 'pccRules',
            'pcscf_rest_indication': 'pcscfRestIndication',
            'qos_decs': 'qosDecs',
            'chg_decs': 'chgDecs',
            'charging_info': 'chargingInfo',
            'traff_cont_decs': 'traffContDecs',
            'um_decs': 'umDecs',
            'qos_chars': 'qosChars',
            'reflective_qo_s_timer': 'reflectiveQoSTimer',
            'conds': 'conds',
            'revalidation_time': 'revalidationTime',
            'offline': 'offline',
            'online': 'online',
            'policy_ctrl_req_triggers': 'policyCtrlReqTriggers',
            'last_req_rule_data': 'lastReqRuleData',
            'last_req_usage_data': 'lastReqUsageData',
            'pra_infos': 'praInfos',
            'ipv4_index': 'ipv4Index',
            'ipv6_index': 'ipv6Index',
            'qos_flow_usage': 'qosFlowUsage',
            'supp_feat': 'suppFeat'
        }
        self._sess_rules = sess_rules
        self._pcc_rules = pcc_rules
        self._pcscf_rest_indication = pcscf_rest_indication
        self._qos_decs = qos_decs
        self._chg_decs = chg_decs
        self._charging_info = charging_info
        self._traff_cont_decs = traff_cont_decs
        self._um_decs = um_decs
        self._qos_chars = qos_chars
        self._reflective_qo_s_timer = reflective_qo_s_timer
        self._conds = conds
        self._revalidation_time = revalidation_time
        self._offline = offline
        self._online = online
        self._policy_ctrl_req_triggers = policy_ctrl_req_triggers
        self._last_req_rule_data = last_req_rule_data
        self._last_req_usage_data = last_req_usage_data
        self._pra_infos = pra_infos
        self._ipv4_index = ipv4_index
        self._ipv6_index = ipv6_index
        self._qos_flow_usage = qos_flow_usage
        self._supp_feat = supp_feat

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SmPolicyDecision of this SmPolicyDecision.  # noqa: E501
        :rtype: SmPolicyDecision
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sess_rules(self):
        """Gets the sess_rules of this SmPolicyDecision.

        A map of Sessionrules with the content being the SessionRule as described in subclause 5.6.2.7.  # noqa: E501

        :return: The sess_rules of this SmPolicyDecision.
        :rtype: Dict[str, SessionRule]
        """
        return self._sess_rules

    @sess_rules.setter
    def sess_rules(self, sess_rules):
        """Sets the sess_rules of this SmPolicyDecision.

        A map of Sessionrules with the content being the SessionRule as described in subclause 5.6.2.7.  # noqa: E501

        :param sess_rules: The sess_rules of this SmPolicyDecision.
        :type sess_rules: Dict[str, SessionRule]
        """

        self._sess_rules = sess_rules

    @property
    def pcc_rules(self):
        """Gets the pcc_rules of this SmPolicyDecision.

        A map of PCC rules with the content being the PCCRule as described in subclause 5.6.2.6.  # noqa: E501

        :return: The pcc_rules of this SmPolicyDecision.
        :rtype: Dict[str, PccRule]
        """
        return self._pcc_rules

    @pcc_rules.setter
    def pcc_rules(self, pcc_rules):
        """Sets the pcc_rules of this SmPolicyDecision.

        A map of PCC rules with the content being the PCCRule as described in subclause 5.6.2.6.  # noqa: E501

        :param pcc_rules: The pcc_rules of this SmPolicyDecision.
        :type pcc_rules: Dict[str, PccRule]
        """

        self._pcc_rules = pcc_rules

    @property
    def pcscf_rest_indication(self):
        """Gets the pcscf_rest_indication of this SmPolicyDecision.

        If it is included and set to true, it indicates the P-CSCF Restoration is requested.  # noqa: E501

        :return: The pcscf_rest_indication of this SmPolicyDecision.
        :rtype: bool
        """
        return self._pcscf_rest_indication

    @pcscf_rest_indication.setter
    def pcscf_rest_indication(self, pcscf_rest_indication):
        """Sets the pcscf_rest_indication of this SmPolicyDecision.

        If it is included and set to true, it indicates the P-CSCF Restoration is requested.  # noqa: E501

        :param pcscf_rest_indication: The pcscf_rest_indication of this SmPolicyDecision.
        :type pcscf_rest_indication: bool
        """

        self._pcscf_rest_indication = pcscf_rest_indication

    @property
    def qos_decs(self):
        """Gets the qos_decs of this SmPolicyDecision.

        Map of QoS data policy decisions.  # noqa: E501

        :return: The qos_decs of this SmPolicyDecision.
        :rtype: Dict[str, QosData]
        """
        return self._qos_decs

    @qos_decs.setter
    def qos_decs(self, qos_decs):
        """Sets the qos_decs of this SmPolicyDecision.

        Map of QoS data policy decisions.  # noqa: E501

        :param qos_decs: The qos_decs of this SmPolicyDecision.
        :type qos_decs: Dict[str, QosData]
        """

        self._qos_decs = qos_decs

    @property
    def chg_decs(self):
        """Gets the chg_decs of this SmPolicyDecision.

        Map of Charging data policy decisions.  # noqa: E501

        :return: The chg_decs of this SmPolicyDecision.
        :rtype: Dict[str, ChargingData]
        """
        return self._chg_decs

    @chg_decs.setter
    def chg_decs(self, chg_decs):
        """Sets the chg_decs of this SmPolicyDecision.

        Map of Charging data policy decisions.  # noqa: E501

        :param chg_decs: The chg_decs of this SmPolicyDecision.
        :type chg_decs: Dict[str, ChargingData]
        """

        self._chg_decs = chg_decs

    @property
    def charging_info(self):
        """Gets the charging_info of this SmPolicyDecision.


        :return: The charging_info of this SmPolicyDecision.
        :rtype: ChargingInformation
        """
        return self._charging_info

    @charging_info.setter
    def charging_info(self, charging_info):
        """Sets the charging_info of this SmPolicyDecision.


        :param charging_info: The charging_info of this SmPolicyDecision.
        :type charging_info: ChargingInformation
        """

        self._charging_info = charging_info

    @property
    def traff_cont_decs(self):
        """Gets the traff_cont_decs of this SmPolicyDecision.

        Map of Traffic Control data policy decisions.  # noqa: E501

        :return: The traff_cont_decs of this SmPolicyDecision.
        :rtype: Dict[str, TrafficControlData]
        """
        return self._traff_cont_decs

    @traff_cont_decs.setter
    def traff_cont_decs(self, traff_cont_decs):
        """Sets the traff_cont_decs of this SmPolicyDecision.

        Map of Traffic Control data policy decisions.  # noqa: E501

        :param traff_cont_decs: The traff_cont_decs of this SmPolicyDecision.
        :type traff_cont_decs: Dict[str, TrafficControlData]
        """

        self._traff_cont_decs = traff_cont_decs

    @property
    def um_decs(self):
        """Gets the um_decs of this SmPolicyDecision.

        Map of Usage Monitoring data policy decisions.  # noqa: E501

        :return: The um_decs of this SmPolicyDecision.
        :rtype: Dict[str, UsageMonitoringData]
        """
        return self._um_decs

    @um_decs.setter
    def um_decs(self, um_decs):
        """Sets the um_decs of this SmPolicyDecision.

        Map of Usage Monitoring data policy decisions.  # noqa: E501

        :param um_decs: The um_decs of this SmPolicyDecision.
        :type um_decs: Dict[str, UsageMonitoringData]
        """

        self._um_decs = um_decs

    @property
    def qos_chars(self):
        """Gets the qos_chars of this SmPolicyDecision.

        Map of QoS characteristics for non standard 5QIs. This map uses the 5QI values as keys.  # noqa: E501

        :return: The qos_chars of this SmPolicyDecision.
        :rtype: Dict[str, QosCharacteristics]
        """
        return self._qos_chars

    @qos_chars.setter
    def qos_chars(self, qos_chars):
        """Sets the qos_chars of this SmPolicyDecision.

        Map of QoS characteristics for non standard 5QIs. This map uses the 5QI values as keys.  # noqa: E501

        :param qos_chars: The qos_chars of this SmPolicyDecision.
        :type qos_chars: Dict[str, QosCharacteristics]
        """

        self._qos_chars = qos_chars

    @property
    def reflective_qo_s_timer(self):
        """Gets the reflective_qo_s_timer of this SmPolicyDecision.


        :return: The reflective_qo_s_timer of this SmPolicyDecision.
        :rtype: DurationSec
        """
        return self._reflective_qo_s_timer

    @reflective_qo_s_timer.setter
    def reflective_qo_s_timer(self, reflective_qo_s_timer):
        """Sets the reflective_qo_s_timer of this SmPolicyDecision.


        :param reflective_qo_s_timer: The reflective_qo_s_timer of this SmPolicyDecision.
        :type reflective_qo_s_timer: DurationSec
        """

        self._reflective_qo_s_timer = reflective_qo_s_timer

    @property
    def conds(self):
        """Gets the conds of this SmPolicyDecision.

        A map of condition data with the content being as described in subclause 5.6.2.9.  # noqa: E501

        :return: The conds of this SmPolicyDecision.
        :rtype: Dict[str, ConditionData]
        """
        return self._conds

    @conds.setter
    def conds(self, conds):
        """Sets the conds of this SmPolicyDecision.

        A map of condition data with the content being as described in subclause 5.6.2.9.  # noqa: E501

        :param conds: The conds of this SmPolicyDecision.
        :type conds: Dict[str, ConditionData]
        """

        self._conds = conds

    @property
    def revalidation_time(self):
        """Gets the revalidation_time of this SmPolicyDecision.


        :return: The revalidation_time of this SmPolicyDecision.
        :rtype: datetime
        """
        return self._revalidation_time

    @revalidation_time.setter
    def revalidation_time(self, revalidation_time):
        """Sets the revalidation_time of this SmPolicyDecision.


        :param revalidation_time: The revalidation_time of this SmPolicyDecision.
        :type revalidation_time: datetime
        """

        self._revalidation_time = revalidation_time

    @property
    def offline(self):
        """Gets the offline of this SmPolicyDecision.

        Indicates the offline charging is applicable to the PDU session or PCC rule.  # noqa: E501

        :return: The offline of this SmPolicyDecision.
        :rtype: bool
        """
        return self._offline

    @offline.setter
    def offline(self, offline):
        """Sets the offline of this SmPolicyDecision.

        Indicates the offline charging is applicable to the PDU session or PCC rule.  # noqa: E501

        :param offline: The offline of this SmPolicyDecision.
        :type offline: bool
        """

        self._offline = offline

    @property
    def online(self):
        """Gets the online of this SmPolicyDecision.

        Indicates the online charging is applicable to the PDU session or PCC rule.  # noqa: E501

        :return: The online of this SmPolicyDecision.
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this SmPolicyDecision.

        Indicates the online charging is applicable to the PDU session or PCC rule.  # noqa: E501

        :param online: The online of this SmPolicyDecision.
        :type online: bool
        """

        self._online = online

    @property
    def policy_ctrl_req_triggers(self):
        """Gets the policy_ctrl_req_triggers of this SmPolicyDecision.

        Defines the policy control request triggers subscribed by the PCF.  # noqa: E501

        :return: The policy_ctrl_req_triggers of this SmPolicyDecision.
        :rtype: List[PolicyControlRequestTrigger]
        """
        return self._policy_ctrl_req_triggers

    @policy_ctrl_req_triggers.setter
    def policy_ctrl_req_triggers(self, policy_ctrl_req_triggers):
        """Sets the policy_ctrl_req_triggers of this SmPolicyDecision.

        Defines the policy control request triggers subscribed by the PCF.  # noqa: E501

        :param policy_ctrl_req_triggers: The policy_ctrl_req_triggers of this SmPolicyDecision.
        :type policy_ctrl_req_triggers: List[PolicyControlRequestTrigger]
        """

        self._policy_ctrl_req_triggers = policy_ctrl_req_triggers

    @property
    def last_req_rule_data(self):
        """Gets the last_req_rule_data of this SmPolicyDecision.

        Defines the last list of rule control data requested by the PCF.  # noqa: E501

        :return: The last_req_rule_data of this SmPolicyDecision.
        :rtype: List[RequestedRuleData]
        """
        return self._last_req_rule_data

    @last_req_rule_data.setter
    def last_req_rule_data(self, last_req_rule_data):
        """Sets the last_req_rule_data of this SmPolicyDecision.

        Defines the last list of rule control data requested by the PCF.  # noqa: E501

        :param last_req_rule_data: The last_req_rule_data of this SmPolicyDecision.
        :type last_req_rule_data: List[RequestedRuleData]
        """

        self._last_req_rule_data = last_req_rule_data

    @property
    def last_req_usage_data(self):
        """Gets the last_req_usage_data of this SmPolicyDecision.


        :return: The last_req_usage_data of this SmPolicyDecision.
        :rtype: RequestedUsageData
        """
        return self._last_req_usage_data

    @last_req_usage_data.setter
    def last_req_usage_data(self, last_req_usage_data):
        """Sets the last_req_usage_data of this SmPolicyDecision.


        :param last_req_usage_data: The last_req_usage_data of this SmPolicyDecision.
        :type last_req_usage_data: RequestedUsageData
        """

        self._last_req_usage_data = last_req_usage_data

    @property
    def pra_infos(self):
        """Gets the pra_infos of this SmPolicyDecision.

        Map of PRA information.  # noqa: E501

        :return: The pra_infos of this SmPolicyDecision.
        :rtype: Dict[str, PresenceInfoRm]
        """
        return self._pra_infos

    @pra_infos.setter
    def pra_infos(self, pra_infos):
        """Sets the pra_infos of this SmPolicyDecision.

        Map of PRA information.  # noqa: E501

        :param pra_infos: The pra_infos of this SmPolicyDecision.
        :type pra_infos: Dict[str, PresenceInfoRm]
        """

        self._pra_infos = pra_infos

    @property
    def ipv4_index(self):
        """Gets the ipv4_index of this SmPolicyDecision.


        :return: The ipv4_index of this SmPolicyDecision.
        :rtype: IpIndex
        """
        return self._ipv4_index

    @ipv4_index.setter
    def ipv4_index(self, ipv4_index):
        """Sets the ipv4_index of this SmPolicyDecision.


        :param ipv4_index: The ipv4_index of this SmPolicyDecision.
        :type ipv4_index: IpIndex
        """

        self._ipv4_index = ipv4_index

    @property
    def ipv6_index(self):
        """Gets the ipv6_index of this SmPolicyDecision.


        :return: The ipv6_index of this SmPolicyDecision.
        :rtype: IpIndex
        """
        return self._ipv6_index

    @ipv6_index.setter
    def ipv6_index(self, ipv6_index):
        """Sets the ipv6_index of this SmPolicyDecision.


        :param ipv6_index: The ipv6_index of this SmPolicyDecision.
        :type ipv6_index: IpIndex
        """

        self._ipv6_index = ipv6_index

    @property
    def qos_flow_usage(self):
        """Gets the qos_flow_usage of this SmPolicyDecision.


        :return: The qos_flow_usage of this SmPolicyDecision.
        :rtype: QosFlowUsage
        """
        return self._qos_flow_usage

    @qos_flow_usage.setter
    def qos_flow_usage(self, qos_flow_usage):
        """Sets the qos_flow_usage of this SmPolicyDecision.


        :param qos_flow_usage: The qos_flow_usage of this SmPolicyDecision.
        :type qos_flow_usage: QosFlowUsage
        """

        self._qos_flow_usage = qos_flow_usage

    @property
    def supp_feat(self):
        """Gets the supp_feat of this SmPolicyDecision.


        :return: The supp_feat of this SmPolicyDecision.
        :rtype: SupportedFeatures
        """
        return self._supp_feat

    @supp_feat.setter
    def supp_feat(self, supp_feat):
        """Sets the supp_feat of this SmPolicyDecision.


        :param supp_feat: The supp_feat of this SmPolicyDecision.
        :type supp_feat: SupportedFeatures
        """

        self._supp_feat = supp_feat
