# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.up_confidentiality import UpConfidentiality  # noqa: F401,E501
from swagger_server.models.up_integrity import UpIntegrity  # noqa: F401,E501
from swagger_server import util


class UpSecurity(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, up_integr=None, up_confid=None):  # noqa: E501
        """UpSecurity - a model defined in Swagger

        :param up_integr: The up_integr of this UpSecurity.  # noqa: E501
        :type up_integr: UpIntegrity
        :param up_confid: The up_confid of this UpSecurity.  # noqa: E501
        :type up_confid: UpConfidentiality
        """
        self.swagger_types = {
            'up_integr': UpIntegrity,
            'up_confid': UpConfidentiality
        }

        self.attribute_map = {
            'up_integr': 'upIntegr',
            'up_confid': 'upConfid'
        }
        self._up_integr = up_integr
        self._up_confid = up_confid

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpSecurity of this UpSecurity.  # noqa: E501
        :rtype: UpSecurity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def up_integr(self):
        """Gets the up_integr of this UpSecurity.


        :return: The up_integr of this UpSecurity.
        :rtype: UpIntegrity
        """
        return self._up_integr

    @up_integr.setter
    def up_integr(self, up_integr):
        """Sets the up_integr of this UpSecurity.


        :param up_integr: The up_integr of this UpSecurity.
        :type up_integr: UpIntegrity
        """
        if up_integr is None:
            raise ValueError("Invalid value for `up_integr`, must not be `None`")  # noqa: E501

        self._up_integr = up_integr

    @property
    def up_confid(self):
        """Gets the up_confid of this UpSecurity.


        :return: The up_confid of this UpSecurity.
        :rtype: UpConfidentiality
        """
        return self._up_confid

    @up_confid.setter
    def up_confid(self, up_confid):
        """Sets the up_confid of this UpSecurity.


        :param up_confid: The up_confid of this UpSecurity.
        :type up_confid: UpConfidentiality
        """
        if up_confid is None:
            raise ValueError("Invalid value for `up_confid`, must not be `None`")  # noqa: E501

        self._up_confid = up_confid
