# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.int64 import Int64  # noqa: F401,E501
from swagger_server.models.qfi import Qfi  # noqa: F401,E501
from swagger_server import util


class QosFlowUsageReport(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, qfi=None, start_time_stamp=None, end_time_stamp=None, downlink_volume=None, uplink_volume=None):  # noqa: E501
        """QosFlowUsageReport - a model defined in Swagger

        :param qfi: The qfi of this QosFlowUsageReport.  # noqa: E501
        :type qfi: Qfi
        :param start_time_stamp: The start_time_stamp of this QosFlowUsageReport.  # noqa: E501
        :type start_time_stamp: datetime
        :param end_time_stamp: The end_time_stamp of this QosFlowUsageReport.  # noqa: E501
        :type end_time_stamp: datetime
        :param downlink_volume: The downlink_volume of this QosFlowUsageReport.  # noqa: E501
        :type downlink_volume: Int64
        :param uplink_volume: The uplink_volume of this QosFlowUsageReport.  # noqa: E501
        :type uplink_volume: Int64
        """
        self.swagger_types = {
            'qfi': Qfi,
            'start_time_stamp': datetime,
            'end_time_stamp': datetime,
            'downlink_volume': Int64,
            'uplink_volume': Int64
        }

        self.attribute_map = {
            'qfi': 'qfi',
            'start_time_stamp': 'startTimeStamp',
            'end_time_stamp': 'endTimeStamp',
            'downlink_volume': 'downlinkVolume',
            'uplink_volume': 'uplinkVolume'
        }
        self._qfi = qfi
        self._start_time_stamp = start_time_stamp
        self._end_time_stamp = end_time_stamp
        self._downlink_volume = downlink_volume
        self._uplink_volume = uplink_volume

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QosFlowUsageReport of this QosFlowUsageReport.  # noqa: E501
        :rtype: QosFlowUsageReport
        """
        return util.deserialize_model(dikt, cls)

    @property
    def qfi(self):
        """Gets the qfi of this QosFlowUsageReport.


        :return: The qfi of this QosFlowUsageReport.
        :rtype: Qfi
        """
        return self._qfi

    @qfi.setter
    def qfi(self, qfi):
        """Sets the qfi of this QosFlowUsageReport.


        :param qfi: The qfi of this QosFlowUsageReport.
        :type qfi: Qfi
        """
        if qfi is None:
            raise ValueError("Invalid value for `qfi`, must not be `None`")  # noqa: E501

        self._qfi = qfi

    @property
    def start_time_stamp(self):
        """Gets the start_time_stamp of this QosFlowUsageReport.


        :return: The start_time_stamp of this QosFlowUsageReport.
        :rtype: datetime
        """
        return self._start_time_stamp

    @start_time_stamp.setter
    def start_time_stamp(self, start_time_stamp):
        """Sets the start_time_stamp of this QosFlowUsageReport.


        :param start_time_stamp: The start_time_stamp of this QosFlowUsageReport.
        :type start_time_stamp: datetime
        """
        if start_time_stamp is None:
            raise ValueError("Invalid value for `start_time_stamp`, must not be `None`")  # noqa: E501

        self._start_time_stamp = start_time_stamp

    @property
    def end_time_stamp(self):
        """Gets the end_time_stamp of this QosFlowUsageReport.


        :return: The end_time_stamp of this QosFlowUsageReport.
        :rtype: datetime
        """
        return self._end_time_stamp

    @end_time_stamp.setter
    def end_time_stamp(self, end_time_stamp):
        """Sets the end_time_stamp of this QosFlowUsageReport.


        :param end_time_stamp: The end_time_stamp of this QosFlowUsageReport.
        :type end_time_stamp: datetime
        """
        if end_time_stamp is None:
            raise ValueError("Invalid value for `end_time_stamp`, must not be `None`")  # noqa: E501

        self._end_time_stamp = end_time_stamp

    @property
    def downlink_volume(self):
        """Gets the downlink_volume of this QosFlowUsageReport.


        :return: The downlink_volume of this QosFlowUsageReport.
        :rtype: Int64
        """
        return self._downlink_volume

    @downlink_volume.setter
    def downlink_volume(self, downlink_volume):
        """Sets the downlink_volume of this QosFlowUsageReport.


        :param downlink_volume: The downlink_volume of this QosFlowUsageReport.
        :type downlink_volume: Int64
        """
        if downlink_volume is None:
            raise ValueError("Invalid value for `downlink_volume`, must not be `None`")  # noqa: E501

        self._downlink_volume = downlink_volume

    @property
    def uplink_volume(self):
        """Gets the uplink_volume of this QosFlowUsageReport.


        :return: The uplink_volume of this QosFlowUsageReport.
        :rtype: Int64
        """
        return self._uplink_volume

    @uplink_volume.setter
    def uplink_volume(self, uplink_volume):
        """Sets the uplink_volume of this QosFlowUsageReport.


        :param uplink_volume: The uplink_volume of this QosFlowUsageReport.
        :type uplink_volume: Int64
        """
        if uplink_volume is None:
            raise ValueError("Invalid value for `uplink_volume`, must not be `None`")  # noqa: E501

        self._uplink_volume = uplink_volume
