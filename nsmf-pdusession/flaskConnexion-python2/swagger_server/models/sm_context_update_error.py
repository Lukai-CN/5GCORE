# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.n2_sm_info_type import N2SmInfoType  # noqa: F401,E501
from swagger_server.models.problem_details import ProblemDetails  # noqa: F401,E501
from swagger_server.models.ref_to_binary_data import RefToBinaryData  # noqa: F401,E501
from swagger_server.models.up_cnx_state import UpCnxState  # noqa: F401,E501
from swagger_server import util


class SmContextUpdateError(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, error=None, n1_sm_msg=None, n2_sm_info=None, n2_sm_info_type=None, up_cnx_state=None, recovery_time=None):  # noqa: E501
        """SmContextUpdateError - a model defined in Swagger

        :param error: The error of this SmContextUpdateError.  # noqa: E501
        :type error: ProblemDetails
        :param n1_sm_msg: The n1_sm_msg of this SmContextUpdateError.  # noqa: E501
        :type n1_sm_msg: RefToBinaryData
        :param n2_sm_info: The n2_sm_info of this SmContextUpdateError.  # noqa: E501
        :type n2_sm_info: RefToBinaryData
        :param n2_sm_info_type: The n2_sm_info_type of this SmContextUpdateError.  # noqa: E501
        :type n2_sm_info_type: N2SmInfoType
        :param up_cnx_state: The up_cnx_state of this SmContextUpdateError.  # noqa: E501
        :type up_cnx_state: UpCnxState
        :param recovery_time: The recovery_time of this SmContextUpdateError.  # noqa: E501
        :type recovery_time: datetime
        """
        self.swagger_types = {
            'error': ProblemDetails,
            'n1_sm_msg': RefToBinaryData,
            'n2_sm_info': RefToBinaryData,
            'n2_sm_info_type': N2SmInfoType,
            'up_cnx_state': UpCnxState,
            'recovery_time': datetime
        }

        self.attribute_map = {
            'error': 'error',
            'n1_sm_msg': 'n1SmMsg',
            'n2_sm_info': 'n2SmInfo',
            'n2_sm_info_type': 'n2SmInfoType',
            'up_cnx_state': 'upCnxState',
            'recovery_time': 'recoveryTime'
        }
        self._error = error
        self._n1_sm_msg = n1_sm_msg
        self._n2_sm_info = n2_sm_info
        self._n2_sm_info_type = n2_sm_info_type
        self._up_cnx_state = up_cnx_state
        self._recovery_time = recovery_time

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SmContextUpdateError of this SmContextUpdateError.  # noqa: E501
        :rtype: SmContextUpdateError
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this SmContextUpdateError.


        :return: The error of this SmContextUpdateError.
        :rtype: ProblemDetails
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this SmContextUpdateError.


        :param error: The error of this SmContextUpdateError.
        :type error: ProblemDetails
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")  # noqa: E501

        self._error = error

    @property
    def n1_sm_msg(self):
        """Gets the n1_sm_msg of this SmContextUpdateError.


        :return: The n1_sm_msg of this SmContextUpdateError.
        :rtype: RefToBinaryData
        """
        return self._n1_sm_msg

    @n1_sm_msg.setter
    def n1_sm_msg(self, n1_sm_msg):
        """Sets the n1_sm_msg of this SmContextUpdateError.


        :param n1_sm_msg: The n1_sm_msg of this SmContextUpdateError.
        :type n1_sm_msg: RefToBinaryData
        """

        self._n1_sm_msg = n1_sm_msg

    @property
    def n2_sm_info(self):
        """Gets the n2_sm_info of this SmContextUpdateError.


        :return: The n2_sm_info of this SmContextUpdateError.
        :rtype: RefToBinaryData
        """
        return self._n2_sm_info

    @n2_sm_info.setter
    def n2_sm_info(self, n2_sm_info):
        """Sets the n2_sm_info of this SmContextUpdateError.


        :param n2_sm_info: The n2_sm_info of this SmContextUpdateError.
        :type n2_sm_info: RefToBinaryData
        """

        self._n2_sm_info = n2_sm_info

    @property
    def n2_sm_info_type(self):
        """Gets the n2_sm_info_type of this SmContextUpdateError.


        :return: The n2_sm_info_type of this SmContextUpdateError.
        :rtype: N2SmInfoType
        """
        return self._n2_sm_info_type

    @n2_sm_info_type.setter
    def n2_sm_info_type(self, n2_sm_info_type):
        """Sets the n2_sm_info_type of this SmContextUpdateError.


        :param n2_sm_info_type: The n2_sm_info_type of this SmContextUpdateError.
        :type n2_sm_info_type: N2SmInfoType
        """

        self._n2_sm_info_type = n2_sm_info_type

    @property
    def up_cnx_state(self):
        """Gets the up_cnx_state of this SmContextUpdateError.


        :return: The up_cnx_state of this SmContextUpdateError.
        :rtype: UpCnxState
        """
        return self._up_cnx_state

    @up_cnx_state.setter
    def up_cnx_state(self, up_cnx_state):
        """Sets the up_cnx_state of this SmContextUpdateError.


        :param up_cnx_state: The up_cnx_state of this SmContextUpdateError.
        :type up_cnx_state: UpCnxState
        """

        self._up_cnx_state = up_cnx_state

    @property
    def recovery_time(self):
        """Gets the recovery_time of this SmContextUpdateError.


        :return: The recovery_time of this SmContextUpdateError.
        :rtype: datetime
        """
        return self._recovery_time

    @recovery_time.setter
    def recovery_time(self, recovery_time):
        """Sets the recovery_time of this SmContextUpdateError.


        :param recovery_time: The recovery_time of this SmContextUpdateError.
        :type recovery_time: datetime
        """

        self._recovery_time = recovery_time
