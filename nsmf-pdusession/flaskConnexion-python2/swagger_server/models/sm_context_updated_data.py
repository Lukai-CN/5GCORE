# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.cause import Cause  # noqa: F401,E501
from swagger_server.models.ebi_arp_mapping import EbiArpMapping  # noqa: F401,E501
from swagger_server.models.eps_bearer_container import EpsBearerContainer  # noqa: F401,E501
from swagger_server.models.eps_bearer_id import EpsBearerId  # noqa: F401,E501
from swagger_server.models.ho_state import HoState  # noqa: F401,E501
from swagger_server.models.n2_sm_info_type import N2SmInfoType  # noqa: F401,E501
from swagger_server.models.ref_to_binary_data import RefToBinaryData  # noqa: F401,E501
from swagger_server.models.up_cnx_state import UpCnxState  # noqa: F401,E501
from swagger_server import util


class SmContextUpdatedData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, up_cnx_state=None, ho_state=None, release_ebi_list=None, allocated_ebi_list=None, modified_ebi_list=None, n1_sm_msg=None, n2_sm_info=None, n2_sm_info_type=None, eps_bearer_setup=None, data_forwarding=None, cause=None):  # noqa: E501
        """SmContextUpdatedData - a model defined in Swagger

        :param up_cnx_state: The up_cnx_state of this SmContextUpdatedData.  # noqa: E501
        :type up_cnx_state: UpCnxState
        :param ho_state: The ho_state of this SmContextUpdatedData.  # noqa: E501
        :type ho_state: HoState
        :param release_ebi_list: The release_ebi_list of this SmContextUpdatedData.  # noqa: E501
        :type release_ebi_list: List[EpsBearerId]
        :param allocated_ebi_list: The allocated_ebi_list of this SmContextUpdatedData.  # noqa: E501
        :type allocated_ebi_list: List[EbiArpMapping]
        :param modified_ebi_list: The modified_ebi_list of this SmContextUpdatedData.  # noqa: E501
        :type modified_ebi_list: List[EbiArpMapping]
        :param n1_sm_msg: The n1_sm_msg of this SmContextUpdatedData.  # noqa: E501
        :type n1_sm_msg: RefToBinaryData
        :param n2_sm_info: The n2_sm_info of this SmContextUpdatedData.  # noqa: E501
        :type n2_sm_info: RefToBinaryData
        :param n2_sm_info_type: The n2_sm_info_type of this SmContextUpdatedData.  # noqa: E501
        :type n2_sm_info_type: N2SmInfoType
        :param eps_bearer_setup: The eps_bearer_setup of this SmContextUpdatedData.  # noqa: E501
        :type eps_bearer_setup: List[EpsBearerContainer]
        :param data_forwarding: The data_forwarding of this SmContextUpdatedData.  # noqa: E501
        :type data_forwarding: bool
        :param cause: The cause of this SmContextUpdatedData.  # noqa: E501
        :type cause: Cause
        """
        self.swagger_types = {
            'up_cnx_state': UpCnxState,
            'ho_state': HoState,
            'release_ebi_list': List[EpsBearerId],
            'allocated_ebi_list': List[EbiArpMapping],
            'modified_ebi_list': List[EbiArpMapping],
            'n1_sm_msg': RefToBinaryData,
            'n2_sm_info': RefToBinaryData,
            'n2_sm_info_type': N2SmInfoType,
            'eps_bearer_setup': List[EpsBearerContainer],
            'data_forwarding': bool,
            'cause': Cause
        }

        self.attribute_map = {
            'up_cnx_state': 'upCnxState',
            'ho_state': 'hoState',
            'release_ebi_list': 'releaseEbiList',
            'allocated_ebi_list': 'allocatedEbiList',
            'modified_ebi_list': 'modifiedEbiList',
            'n1_sm_msg': 'n1SmMsg',
            'n2_sm_info': 'n2SmInfo',
            'n2_sm_info_type': 'n2SmInfoType',
            'eps_bearer_setup': 'epsBearerSetup',
            'data_forwarding': 'dataForwarding',
            'cause': 'cause'
        }
        self._up_cnx_state = up_cnx_state
        self._ho_state = ho_state
        self._release_ebi_list = release_ebi_list
        self._allocated_ebi_list = allocated_ebi_list
        self._modified_ebi_list = modified_ebi_list
        self._n1_sm_msg = n1_sm_msg
        self._n2_sm_info = n2_sm_info
        self._n2_sm_info_type = n2_sm_info_type
        self._eps_bearer_setup = eps_bearer_setup
        self._data_forwarding = data_forwarding
        self._cause = cause

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SmContextUpdatedData of this SmContextUpdatedData.  # noqa: E501
        :rtype: SmContextUpdatedData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def up_cnx_state(self):
        """Gets the up_cnx_state of this SmContextUpdatedData.


        :return: The up_cnx_state of this SmContextUpdatedData.
        :rtype: UpCnxState
        """
        return self._up_cnx_state

    @up_cnx_state.setter
    def up_cnx_state(self, up_cnx_state):
        """Sets the up_cnx_state of this SmContextUpdatedData.


        :param up_cnx_state: The up_cnx_state of this SmContextUpdatedData.
        :type up_cnx_state: UpCnxState
        """

        self._up_cnx_state = up_cnx_state

    @property
    def ho_state(self):
        """Gets the ho_state of this SmContextUpdatedData.


        :return: The ho_state of this SmContextUpdatedData.
        :rtype: HoState
        """
        return self._ho_state

    @ho_state.setter
    def ho_state(self, ho_state):
        """Sets the ho_state of this SmContextUpdatedData.


        :param ho_state: The ho_state of this SmContextUpdatedData.
        :type ho_state: HoState
        """

        self._ho_state = ho_state

    @property
    def release_ebi_list(self):
        """Gets the release_ebi_list of this SmContextUpdatedData.


        :return: The release_ebi_list of this SmContextUpdatedData.
        :rtype: List[EpsBearerId]
        """
        return self._release_ebi_list

    @release_ebi_list.setter
    def release_ebi_list(self, release_ebi_list):
        """Sets the release_ebi_list of this SmContextUpdatedData.


        :param release_ebi_list: The release_ebi_list of this SmContextUpdatedData.
        :type release_ebi_list: List[EpsBearerId]
        """

        self._release_ebi_list = release_ebi_list

    @property
    def allocated_ebi_list(self):
        """Gets the allocated_ebi_list of this SmContextUpdatedData.


        :return: The allocated_ebi_list of this SmContextUpdatedData.
        :rtype: List[EbiArpMapping]
        """
        return self._allocated_ebi_list

    @allocated_ebi_list.setter
    def allocated_ebi_list(self, allocated_ebi_list):
        """Sets the allocated_ebi_list of this SmContextUpdatedData.


        :param allocated_ebi_list: The allocated_ebi_list of this SmContextUpdatedData.
        :type allocated_ebi_list: List[EbiArpMapping]
        """

        self._allocated_ebi_list = allocated_ebi_list

    @property
    def modified_ebi_list(self):
        """Gets the modified_ebi_list of this SmContextUpdatedData.


        :return: The modified_ebi_list of this SmContextUpdatedData.
        :rtype: List[EbiArpMapping]
        """
        return self._modified_ebi_list

    @modified_ebi_list.setter
    def modified_ebi_list(self, modified_ebi_list):
        """Sets the modified_ebi_list of this SmContextUpdatedData.


        :param modified_ebi_list: The modified_ebi_list of this SmContextUpdatedData.
        :type modified_ebi_list: List[EbiArpMapping]
        """

        self._modified_ebi_list = modified_ebi_list

    @property
    def n1_sm_msg(self):
        """Gets the n1_sm_msg of this SmContextUpdatedData.


        :return: The n1_sm_msg of this SmContextUpdatedData.
        :rtype: RefToBinaryData
        """
        return self._n1_sm_msg

    @n1_sm_msg.setter
    def n1_sm_msg(self, n1_sm_msg):
        """Sets the n1_sm_msg of this SmContextUpdatedData.


        :param n1_sm_msg: The n1_sm_msg of this SmContextUpdatedData.
        :type n1_sm_msg: RefToBinaryData
        """

        self._n1_sm_msg = n1_sm_msg

    @property
    def n2_sm_info(self):
        """Gets the n2_sm_info of this SmContextUpdatedData.


        :return: The n2_sm_info of this SmContextUpdatedData.
        :rtype: RefToBinaryData
        """
        return self._n2_sm_info

    @n2_sm_info.setter
    def n2_sm_info(self, n2_sm_info):
        """Sets the n2_sm_info of this SmContextUpdatedData.


        :param n2_sm_info: The n2_sm_info of this SmContextUpdatedData.
        :type n2_sm_info: RefToBinaryData
        """

        self._n2_sm_info = n2_sm_info

    @property
    def n2_sm_info_type(self):
        """Gets the n2_sm_info_type of this SmContextUpdatedData.


        :return: The n2_sm_info_type of this SmContextUpdatedData.
        :rtype: N2SmInfoType
        """
        return self._n2_sm_info_type

    @n2_sm_info_type.setter
    def n2_sm_info_type(self, n2_sm_info_type):
        """Sets the n2_sm_info_type of this SmContextUpdatedData.


        :param n2_sm_info_type: The n2_sm_info_type of this SmContextUpdatedData.
        :type n2_sm_info_type: N2SmInfoType
        """

        self._n2_sm_info_type = n2_sm_info_type

    @property
    def eps_bearer_setup(self):
        """Gets the eps_bearer_setup of this SmContextUpdatedData.


        :return: The eps_bearer_setup of this SmContextUpdatedData.
        :rtype: List[EpsBearerContainer]
        """
        return self._eps_bearer_setup

    @eps_bearer_setup.setter
    def eps_bearer_setup(self, eps_bearer_setup):
        """Sets the eps_bearer_setup of this SmContextUpdatedData.


        :param eps_bearer_setup: The eps_bearer_setup of this SmContextUpdatedData.
        :type eps_bearer_setup: List[EpsBearerContainer]
        """

        self._eps_bearer_setup = eps_bearer_setup

    @property
    def data_forwarding(self):
        """Gets the data_forwarding of this SmContextUpdatedData.


        :return: The data_forwarding of this SmContextUpdatedData.
        :rtype: bool
        """
        return self._data_forwarding

    @data_forwarding.setter
    def data_forwarding(self, data_forwarding):
        """Sets the data_forwarding of this SmContextUpdatedData.


        :param data_forwarding: The data_forwarding of this SmContextUpdatedData.
        :type data_forwarding: bool
        """

        self._data_forwarding = data_forwarding

    @property
    def cause(self):
        """Gets the cause of this SmContextUpdatedData.


        :return: The cause of this SmContextUpdatedData.
        :rtype: Cause
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this SmContextUpdatedData.


        :param cause: The cause of this SmContextUpdatedData.
        :type cause: Cause
        """

        self._cause = cause
